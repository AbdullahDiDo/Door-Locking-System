
FinalProject_CTRL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00001482  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080016e  0080016e  00001624  2**0
                  ALLOC
  3 .stab         00001800  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b26  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000394a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  00003a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a89  00000000  00000000  00003c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ea8  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df9  00000000  00000000  00006550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000734c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bc  00000000  00000000  000074ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000852  00000000  00000000  00007768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 07 	call	0xefe	; 0xefe <main>
      8a:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__stack+0x27>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__stack+0x123>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__stack+0x31>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__stack+0x129>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__stack+0x41>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__stack+0x4d>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__stack+0x47>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__stack+0x123>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__stack+0x129>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__stack+0x5f>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__stack+0x67>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__stack+0x6b>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__stack+0x129>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__stack+0xa5>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__stack+0xd3>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__stack+0xb9>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__stack+0x11b>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__stack+0x11b>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__stack+0x11b>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 49 05 	call	0xa92	; 0xa92 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__epilogue_restores__+0x18>

000005f6 <__floatsisf>:
     5f6:	a8 e0       	ldi	r26, 0x08	; 8
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__prologue_saves__+0x12>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	da 01       	movw	r26, r20
     60c:	c9 01       	movw	r24, r18
     60e:	88 27       	eor	r24, r24
     610:	b7 fd       	sbrc	r27, 7
     612:	83 95       	inc	r24
     614:	99 27       	eor	r25, r25
     616:	aa 27       	eor	r26, r26
     618:	bb 27       	eor	r27, r27
     61a:	b8 2e       	mov	r11, r24
     61c:	21 15       	cp	r18, r1
     61e:	31 05       	cpc	r19, r1
     620:	41 05       	cpc	r20, r1
     622:	51 05       	cpc	r21, r1
     624:	19 f4       	brne	.+6      	; 0x62c <__floatsisf+0x36>
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	3a c0       	rjmp	.+116    	; 0x6a0 <__floatsisf+0xaa>
     62c:	88 23       	and	r24, r24
     62e:	a9 f0       	breq	.+42     	; 0x65a <__floatsisf+0x64>
     630:	20 30       	cpi	r18, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	38 07       	cpc	r19, r24
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	48 07       	cpc	r20, r24
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	58 07       	cpc	r21, r24
     63e:	29 f4       	brne	.+10     	; 0x64a <__floatsisf+0x54>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	9f ec       	ldi	r25, 0xCF	; 207
     648:	30 c0       	rjmp	.+96     	; 0x6aa <__floatsisf+0xb4>
     64a:	ee 24       	eor	r14, r14
     64c:	ff 24       	eor	r15, r15
     64e:	87 01       	movw	r16, r14
     650:	e2 1a       	sub	r14, r18
     652:	f3 0a       	sbc	r15, r19
     654:	04 0b       	sbc	r16, r20
     656:	15 0b       	sbc	r17, r21
     658:	02 c0       	rjmp	.+4      	; 0x65e <__floatsisf+0x68>
     65a:	79 01       	movw	r14, r18
     65c:	8a 01       	movw	r16, r20
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	c8 2e       	mov	r12, r24
     662:	d1 2c       	mov	r13, r1
     664:	dc 82       	std	Y+4, r13	; 0x04
     666:	cb 82       	std	Y+3, r12	; 0x03
     668:	ed 82       	std	Y+5, r14	; 0x05
     66a:	fe 82       	std	Y+6, r15	; 0x06
     66c:	0f 83       	std	Y+7, r16	; 0x07
     66e:	18 87       	std	Y+8, r17	; 0x08
     670:	c8 01       	movw	r24, r16
     672:	b7 01       	movw	r22, r14
     674:	0e 94 ad 03 	call	0x75a	; 0x75a <__clzsi2>
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	18 16       	cp	r1, r24
     67c:	19 06       	cpc	r1, r25
     67e:	84 f4       	brge	.+32     	; 0x6a0 <__floatsisf+0xaa>
     680:	08 2e       	mov	r0, r24
     682:	04 c0       	rjmp	.+8      	; 0x68c <__floatsisf+0x96>
     684:	ee 0c       	add	r14, r14
     686:	ff 1c       	adc	r15, r15
     688:	00 1f       	adc	r16, r16
     68a:	11 1f       	adc	r17, r17
     68c:	0a 94       	dec	r0
     68e:	d2 f7       	brpl	.-12     	; 0x684 <__floatsisf+0x8e>
     690:	ed 82       	std	Y+5, r14	; 0x05
     692:	fe 82       	std	Y+6, r15	; 0x06
     694:	0f 83       	std	Y+7, r16	; 0x07
     696:	18 87       	std	Y+8, r17	; 0x08
     698:	c8 1a       	sub	r12, r24
     69a:	d9 0a       	sbc	r13, r25
     69c:	dc 82       	std	Y+4, r13	; 0x04
     69e:	cb 82       	std	Y+3, r12	; 0x03
     6a0:	ba 82       	std	Y+2, r11	; 0x02
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__pack_f>
     6aa:	28 96       	adiw	r28, 0x08	; 8
     6ac:	e9 e0       	ldi	r30, 0x09	; 9
     6ae:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__epilogue_restores__+0x12>

000006b2 <__fixsfsi>:
     6b2:	ac e0       	ldi	r26, 0x0C	; 12
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	ef e5       	ldi	r30, 0x5F	; 95
     6b8:	f3 e0       	ldi	r31, 0x03	; 3
     6ba:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__prologue_saves__+0x20>
     6be:	69 83       	std	Y+1, r22	; 0x01
     6c0:	7a 83       	std	Y+2, r23	; 0x02
     6c2:	8b 83       	std	Y+3, r24	; 0x03
     6c4:	9c 83       	std	Y+4, r25	; 0x04
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	be 01       	movw	r22, r28
     6cc:	6b 5f       	subi	r22, 0xFB	; 251
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__unpack_f>
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	61 f1       	breq	.+88     	; 0x732 <__fixsfsi+0x80>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	50 f1       	brcs	.+84     	; 0x732 <__fixsfsi+0x80>
     6de:	84 30       	cpi	r24, 0x04	; 4
     6e0:	21 f4       	brne	.+8      	; 0x6ea <__fixsfsi+0x38>
     6e2:	8e 81       	ldd	r24, Y+6	; 0x06
     6e4:	88 23       	and	r24, r24
     6e6:	51 f1       	breq	.+84     	; 0x73c <__fixsfsi+0x8a>
     6e8:	2e c0       	rjmp	.+92     	; 0x746 <__fixsfsi+0x94>
     6ea:	2f 81       	ldd	r18, Y+7	; 0x07
     6ec:	38 85       	ldd	r19, Y+8	; 0x08
     6ee:	37 fd       	sbrc	r19, 7
     6f0:	20 c0       	rjmp	.+64     	; 0x732 <__fixsfsi+0x80>
     6f2:	6e 81       	ldd	r22, Y+6	; 0x06
     6f4:	2f 31       	cpi	r18, 0x1F	; 31
     6f6:	31 05       	cpc	r19, r1
     6f8:	1c f0       	brlt	.+6      	; 0x700 <__fixsfsi+0x4e>
     6fa:	66 23       	and	r22, r22
     6fc:	f9 f0       	breq	.+62     	; 0x73c <__fixsfsi+0x8a>
     6fe:	23 c0       	rjmp	.+70     	; 0x746 <__fixsfsi+0x94>
     700:	8e e1       	ldi	r24, 0x1E	; 30
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	82 1b       	sub	r24, r18
     706:	93 0b       	sbc	r25, r19
     708:	29 85       	ldd	r18, Y+9	; 0x09
     70a:	3a 85       	ldd	r19, Y+10	; 0x0a
     70c:	4b 85       	ldd	r20, Y+11	; 0x0b
     70e:	5c 85       	ldd	r21, Y+12	; 0x0c
     710:	04 c0       	rjmp	.+8      	; 0x71a <__fixsfsi+0x68>
     712:	56 95       	lsr	r21
     714:	47 95       	ror	r20
     716:	37 95       	ror	r19
     718:	27 95       	ror	r18
     71a:	8a 95       	dec	r24
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__fixsfsi+0x60>
     71e:	66 23       	and	r22, r22
     720:	b1 f0       	breq	.+44     	; 0x74e <__fixsfsi+0x9c>
     722:	50 95       	com	r21
     724:	40 95       	com	r20
     726:	30 95       	com	r19
     728:	21 95       	neg	r18
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	4f 4f       	sbci	r20, 0xFF	; 255
     72e:	5f 4f       	sbci	r21, 0xFF	; 255
     730:	0e c0       	rjmp	.+28     	; 0x74e <__fixsfsi+0x9c>
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	09 c0       	rjmp	.+18     	; 0x74e <__fixsfsi+0x9c>
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	3f ef       	ldi	r19, 0xFF	; 255
     740:	4f ef       	ldi	r20, 0xFF	; 255
     742:	5f e7       	ldi	r21, 0x7F	; 127
     744:	04 c0       	rjmp	.+8      	; 0x74e <__fixsfsi+0x9c>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e8       	ldi	r21, 0x80	; 128
     74e:	b9 01       	movw	r22, r18
     750:	ca 01       	movw	r24, r20
     752:	2c 96       	adiw	r28, 0x0c	; 12
     754:	e2 e0       	ldi	r30, 0x02	; 2
     756:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__epilogue_restores__+0x20>

0000075a <__clzsi2>:
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	7b 01       	movw	r14, r22
     764:	8c 01       	movw	r16, r24
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	e8 16       	cp	r14, r24
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	f8 06       	cpc	r15, r24
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	08 07       	cpc	r16, r24
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	18 07       	cpc	r17, r24
     776:	88 f4       	brcc	.+34     	; 0x79a <__clzsi2+0x40>
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	e8 16       	cp	r14, r24
     77c:	f1 04       	cpc	r15, r1
     77e:	01 05       	cpc	r16, r1
     780:	11 05       	cpc	r17, r1
     782:	31 f0       	breq	.+12     	; 0x790 <__clzsi2+0x36>
     784:	28 f0       	brcs	.+10     	; 0x790 <__clzsi2+0x36>
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	17 c0       	rjmp	.+46     	; 0x7be <__clzsi2+0x64>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	12 c0       	rjmp	.+36     	; 0x7be <__clzsi2+0x64>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	e8 16       	cp	r14, r24
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	f8 06       	cpc	r15, r24
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 07       	cpc	r16, r24
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	18 07       	cpc	r17, r24
     7aa:	28 f0       	brcs	.+10     	; 0x7b6 <__clzsi2+0x5c>
     7ac:	88 e1       	ldi	r24, 0x18	; 24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <__clzsi2+0x64>
     7b6:	80 e1       	ldi	r24, 0x10	; 16
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	20 e2       	ldi	r18, 0x20	; 32
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	28 1b       	sub	r18, r24
     7c8:	39 0b       	sbc	r19, r25
     7ca:	4a 0b       	sbc	r20, r26
     7cc:	5b 0b       	sbc	r21, r27
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__clzsi2+0x7e>
     7d0:	16 95       	lsr	r17
     7d2:	07 95       	ror	r16
     7d4:	f7 94       	ror	r15
     7d6:	e7 94       	ror	r14
     7d8:	8a 95       	dec	r24
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__clzsi2+0x76>
     7dc:	f7 01       	movw	r30, r14
     7de:	e8 59       	subi	r30, 0x98	; 152
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	80 81       	ld	r24, Z
     7e4:	28 1b       	sub	r18, r24
     7e6:	31 09       	sbc	r19, r1
     7e8:	41 09       	sbc	r20, r1
     7ea:	51 09       	sbc	r21, r1
     7ec:	c9 01       	movw	r24, r18
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	08 95       	ret

000007f8 <__pack_f>:
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	fc 01       	movw	r30, r24
     804:	e4 80       	ldd	r14, Z+4	; 0x04
     806:	f5 80       	ldd	r15, Z+5	; 0x05
     808:	06 81       	ldd	r16, Z+6	; 0x06
     80a:	17 81       	ldd	r17, Z+7	; 0x07
     80c:	d1 80       	ldd	r13, Z+1	; 0x01
     80e:	80 81       	ld	r24, Z
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	48 f4       	brcc	.+18     	; 0x826 <__pack_f+0x2e>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a0 e1       	ldi	r26, 0x10	; 16
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e8 2a       	or	r14, r24
     81e:	f9 2a       	or	r15, r25
     820:	0a 2b       	or	r16, r26
     822:	1b 2b       	or	r17, r27
     824:	a5 c0       	rjmp	.+330    	; 0x970 <__pack_f+0x178>
     826:	84 30       	cpi	r24, 0x04	; 4
     828:	09 f4       	brne	.+2      	; 0x82c <__pack_f+0x34>
     82a:	9f c0       	rjmp	.+318    	; 0x96a <__pack_f+0x172>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	21 f4       	brne	.+8      	; 0x838 <__pack_f+0x40>
     830:	ee 24       	eor	r14, r14
     832:	ff 24       	eor	r15, r15
     834:	87 01       	movw	r16, r14
     836:	05 c0       	rjmp	.+10     	; 0x842 <__pack_f+0x4a>
     838:	e1 14       	cp	r14, r1
     83a:	f1 04       	cpc	r15, r1
     83c:	01 05       	cpc	r16, r1
     83e:	11 05       	cpc	r17, r1
     840:	19 f4       	brne	.+6      	; 0x848 <__pack_f+0x50>
     842:	e0 e0       	ldi	r30, 0x00	; 0
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	96 c0       	rjmp	.+300    	; 0x974 <__pack_f+0x17c>
     848:	62 81       	ldd	r22, Z+2	; 0x02
     84a:	73 81       	ldd	r23, Z+3	; 0x03
     84c:	9f ef       	ldi	r25, 0xFF	; 255
     84e:	62 38       	cpi	r22, 0x82	; 130
     850:	79 07       	cpc	r23, r25
     852:	0c f0       	brlt	.+2      	; 0x856 <__pack_f+0x5e>
     854:	5b c0       	rjmp	.+182    	; 0x90c <__pack_f+0x114>
     856:	22 e8       	ldi	r18, 0x82	; 130
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	26 1b       	sub	r18, r22
     85c:	37 0b       	sbc	r19, r23
     85e:	2a 31       	cpi	r18, 0x1A	; 26
     860:	31 05       	cpc	r19, r1
     862:	2c f0       	brlt	.+10     	; 0x86e <__pack_f+0x76>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	2a c0       	rjmp	.+84     	; 0x8c2 <__pack_f+0xca>
     86e:	b8 01       	movw	r22, r16
     870:	a7 01       	movw	r20, r14
     872:	02 2e       	mov	r0, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <__pack_f+0x86>
     876:	76 95       	lsr	r23
     878:	67 95       	ror	r22
     87a:	57 95       	ror	r21
     87c:	47 95       	ror	r20
     87e:	0a 94       	dec	r0
     880:	d2 f7       	brpl	.-12     	; 0x876 <__pack_f+0x7e>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__pack_f+0x9c>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	aa 1f       	adc	r26, r26
     892:	bb 1f       	adc	r27, r27
     894:	2a 95       	dec	r18
     896:	d2 f7       	brpl	.-12     	; 0x88c <__pack_f+0x94>
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	a1 09       	sbc	r26, r1
     89c:	b1 09       	sbc	r27, r1
     89e:	8e 21       	and	r24, r14
     8a0:	9f 21       	and	r25, r15
     8a2:	a0 23       	and	r26, r16
     8a4:	b1 23       	and	r27, r17
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	a1 05       	cpc	r26, r1
     8aa:	b1 05       	cpc	r27, r1
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <__pack_f+0xbe>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a0 e0       	ldi	r26, 0x00	; 0
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	9a 01       	movw	r18, r20
     8b8:	ab 01       	movw	r20, r22
     8ba:	28 2b       	or	r18, r24
     8bc:	39 2b       	or	r19, r25
     8be:	4a 2b       	or	r20, r26
     8c0:	5b 2b       	or	r21, r27
     8c2:	da 01       	movw	r26, r20
     8c4:	c9 01       	movw	r24, r18
     8c6:	8f 77       	andi	r24, 0x7F	; 127
     8c8:	90 70       	andi	r25, 0x00	; 0
     8ca:	a0 70       	andi	r26, 0x00	; 0
     8cc:	b0 70       	andi	r27, 0x00	; 0
     8ce:	80 34       	cpi	r24, 0x40	; 64
     8d0:	91 05       	cpc	r25, r1
     8d2:	a1 05       	cpc	r26, r1
     8d4:	b1 05       	cpc	r27, r1
     8d6:	39 f4       	brne	.+14     	; 0x8e6 <__pack_f+0xee>
     8d8:	27 ff       	sbrs	r18, 7
     8da:	09 c0       	rjmp	.+18     	; 0x8ee <__pack_f+0xf6>
     8dc:	20 5c       	subi	r18, 0xC0	; 192
     8de:	3f 4f       	sbci	r19, 0xFF	; 255
     8e0:	4f 4f       	sbci	r20, 0xFF	; 255
     8e2:	5f 4f       	sbci	r21, 0xFF	; 255
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__pack_f+0xf6>
     8e6:	21 5c       	subi	r18, 0xC1	; 193
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	4f 4f       	sbci	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	e0 e0       	ldi	r30, 0x00	; 0
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	20 30       	cpi	r18, 0x00	; 0
     8f4:	a0 e0       	ldi	r26, 0x00	; 0
     8f6:	3a 07       	cpc	r19, r26
     8f8:	a0 e0       	ldi	r26, 0x00	; 0
     8fa:	4a 07       	cpc	r20, r26
     8fc:	a0 e4       	ldi	r26, 0x40	; 64
     8fe:	5a 07       	cpc	r21, r26
     900:	10 f0       	brcs	.+4      	; 0x906 <__pack_f+0x10e>
     902:	e1 e0       	ldi	r30, 0x01	; 1
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	79 01       	movw	r14, r18
     908:	8a 01       	movw	r16, r20
     90a:	27 c0       	rjmp	.+78     	; 0x95a <__pack_f+0x162>
     90c:	60 38       	cpi	r22, 0x80	; 128
     90e:	71 05       	cpc	r23, r1
     910:	64 f5       	brge	.+88     	; 0x96a <__pack_f+0x172>
     912:	fb 01       	movw	r30, r22
     914:	e1 58       	subi	r30, 0x81	; 129
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	d8 01       	movw	r26, r16
     91a:	c7 01       	movw	r24, r14
     91c:	8f 77       	andi	r24, 0x7F	; 127
     91e:	90 70       	andi	r25, 0x00	; 0
     920:	a0 70       	andi	r26, 0x00	; 0
     922:	b0 70       	andi	r27, 0x00	; 0
     924:	80 34       	cpi	r24, 0x40	; 64
     926:	91 05       	cpc	r25, r1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	39 f4       	brne	.+14     	; 0x93c <__pack_f+0x144>
     92e:	e7 fe       	sbrs	r14, 7
     930:	0d c0       	rjmp	.+26     	; 0x94c <__pack_f+0x154>
     932:	80 e4       	ldi	r24, 0x40	; 64
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__pack_f+0x14c>
     93c:	8f e3       	ldi	r24, 0x3F	; 63
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	a0 e0       	ldi	r26, 0x00	; 0
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	e8 0e       	add	r14, r24
     946:	f9 1e       	adc	r15, r25
     948:	0a 1f       	adc	r16, r26
     94a:	1b 1f       	adc	r17, r27
     94c:	17 ff       	sbrs	r17, 7
     94e:	05 c0       	rjmp	.+10     	; 0x95a <__pack_f+0x162>
     950:	16 95       	lsr	r17
     952:	07 95       	ror	r16
     954:	f7 94       	ror	r15
     956:	e7 94       	ror	r14
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	87 e0       	ldi	r24, 0x07	; 7
     95c:	16 95       	lsr	r17
     95e:	07 95       	ror	r16
     960:	f7 94       	ror	r15
     962:	e7 94       	ror	r14
     964:	8a 95       	dec	r24
     966:	d1 f7       	brne	.-12     	; 0x95c <__pack_f+0x164>
     968:	05 c0       	rjmp	.+10     	; 0x974 <__pack_f+0x17c>
     96a:	ee 24       	eor	r14, r14
     96c:	ff 24       	eor	r15, r15
     96e:	87 01       	movw	r16, r14
     970:	ef ef       	ldi	r30, 0xFF	; 255
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	6e 2f       	mov	r22, r30
     976:	67 95       	ror	r22
     978:	66 27       	eor	r22, r22
     97a:	67 95       	ror	r22
     97c:	90 2f       	mov	r25, r16
     97e:	9f 77       	andi	r25, 0x7F	; 127
     980:	d7 94       	ror	r13
     982:	dd 24       	eor	r13, r13
     984:	d7 94       	ror	r13
     986:	8e 2f       	mov	r24, r30
     988:	86 95       	lsr	r24
     98a:	49 2f       	mov	r20, r25
     98c:	46 2b       	or	r20, r22
     98e:	58 2f       	mov	r21, r24
     990:	5d 29       	or	r21, r13
     992:	b7 01       	movw	r22, r14
     994:	ca 01       	movw	r24, r20
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	08 95       	ret

000009a2 <__unpack_f>:
     9a2:	fc 01       	movw	r30, r24
     9a4:	db 01       	movw	r26, r22
     9a6:	40 81       	ld	r20, Z
     9a8:	51 81       	ldd	r21, Z+1	; 0x01
     9aa:	22 81       	ldd	r18, Z+2	; 0x02
     9ac:	62 2f       	mov	r22, r18
     9ae:	6f 77       	andi	r22, 0x7F	; 127
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	22 1f       	adc	r18, r18
     9b4:	22 27       	eor	r18, r18
     9b6:	22 1f       	adc	r18, r18
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	89 2f       	mov	r24, r25
     9bc:	88 0f       	add	r24, r24
     9be:	82 2b       	or	r24, r18
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	99 1f       	adc	r25, r25
     9c6:	99 27       	eor	r25, r25
     9c8:	99 1f       	adc	r25, r25
     9ca:	11 96       	adiw	r26, 0x01	; 1
     9cc:	9c 93       	st	X, r25
     9ce:	11 97       	sbiw	r26, 0x01	; 1
     9d0:	21 15       	cp	r18, r1
     9d2:	31 05       	cpc	r19, r1
     9d4:	a9 f5       	brne	.+106    	; 0xa40 <__unpack_f+0x9e>
     9d6:	41 15       	cp	r20, r1
     9d8:	51 05       	cpc	r21, r1
     9da:	61 05       	cpc	r22, r1
     9dc:	71 05       	cpc	r23, r1
     9de:	11 f4       	brne	.+4      	; 0x9e4 <__unpack_f+0x42>
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	37 c0       	rjmp	.+110    	; 0xa52 <__unpack_f+0xb0>
     9e4:	82 e8       	ldi	r24, 0x82	; 130
     9e6:	9f ef       	ldi	r25, 0xFF	; 255
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	12 97       	sbiw	r26, 0x02	; 2
     9f0:	9a 01       	movw	r18, r20
     9f2:	ab 01       	movw	r20, r22
     9f4:	67 e0       	ldi	r22, 0x07	; 7
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	44 1f       	adc	r20, r20
     9fc:	55 1f       	adc	r21, r21
     9fe:	6a 95       	dec	r22
     a00:	d1 f7       	brne	.-12     	; 0x9f6 <__unpack_f+0x54>
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	8c 93       	st	X, r24
     a06:	0d c0       	rjmp	.+26     	; 0xa22 <__unpack_f+0x80>
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	44 1f       	adc	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	12 96       	adiw	r26, 0x02	; 2
     a12:	8d 91       	ld	r24, X+
     a14:	9c 91       	ld	r25, X
     a16:	13 97       	sbiw	r26, 0x03	; 3
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	13 96       	adiw	r26, 0x03	; 3
     a1c:	9c 93       	st	X, r25
     a1e:	8e 93       	st	-X, r24
     a20:	12 97       	sbiw	r26, 0x02	; 2
     a22:	20 30       	cpi	r18, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	38 07       	cpc	r19, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	48 07       	cpc	r20, r24
     a2c:	80 e4       	ldi	r24, 0x40	; 64
     a2e:	58 07       	cpc	r21, r24
     a30:	58 f3       	brcs	.-42     	; 0xa08 <__unpack_f+0x66>
     a32:	14 96       	adiw	r26, 0x04	; 4
     a34:	2d 93       	st	X+, r18
     a36:	3d 93       	st	X+, r19
     a38:	4d 93       	st	X+, r20
     a3a:	5c 93       	st	X, r21
     a3c:	17 97       	sbiw	r26, 0x07	; 7
     a3e:	08 95       	ret
     a40:	2f 3f       	cpi	r18, 0xFF	; 255
     a42:	31 05       	cpc	r19, r1
     a44:	79 f4       	brne	.+30     	; 0xa64 <__unpack_f+0xc2>
     a46:	41 15       	cp	r20, r1
     a48:	51 05       	cpc	r21, r1
     a4a:	61 05       	cpc	r22, r1
     a4c:	71 05       	cpc	r23, r1
     a4e:	19 f4       	brne	.+6      	; 0xa56 <__unpack_f+0xb4>
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	8c 93       	st	X, r24
     a54:	08 95       	ret
     a56:	64 ff       	sbrs	r22, 4
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <__unpack_f+0xbe>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	8c 93       	st	X, r24
     a5e:	12 c0       	rjmp	.+36     	; 0xa84 <__unpack_f+0xe2>
     a60:	1c 92       	st	X, r1
     a62:	10 c0       	rjmp	.+32     	; 0xa84 <__unpack_f+0xe2>
     a64:	2f 57       	subi	r18, 0x7F	; 127
     a66:	30 40       	sbci	r19, 0x00	; 0
     a68:	13 96       	adiw	r26, 0x03	; 3
     a6a:	3c 93       	st	X, r19
     a6c:	2e 93       	st	-X, r18
     a6e:	12 97       	sbiw	r26, 0x02	; 2
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	8c 93       	st	X, r24
     a74:	87 e0       	ldi	r24, 0x07	; 7
     a76:	44 0f       	add	r20, r20
     a78:	55 1f       	adc	r21, r21
     a7a:	66 1f       	adc	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	8a 95       	dec	r24
     a80:	d1 f7       	brne	.-12     	; 0xa76 <__unpack_f+0xd4>
     a82:	70 64       	ori	r23, 0x40	; 64
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	4d 93       	st	X+, r20
     a88:	5d 93       	st	X+, r21
     a8a:	6d 93       	st	X+, r22
     a8c:	7c 93       	st	X, r23
     a8e:	17 97       	sbiw	r26, 0x07	; 7
     a90:	08 95       	ret

00000a92 <__fpcmp_parts_f>:
     a92:	1f 93       	push	r17
     a94:	dc 01       	movw	r26, r24
     a96:	fb 01       	movw	r30, r22
     a98:	9c 91       	ld	r25, X
     a9a:	92 30       	cpi	r25, 0x02	; 2
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <__fpcmp_parts_f+0xe>
     a9e:	47 c0       	rjmp	.+142    	; 0xb2e <__fpcmp_parts_f+0x9c>
     aa0:	80 81       	ld	r24, Z
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__fpcmp_parts_f+0x16>
     aa6:	43 c0       	rjmp	.+134    	; 0xb2e <__fpcmp_parts_f+0x9c>
     aa8:	94 30       	cpi	r25, 0x04	; 4
     aaa:	51 f4       	brne	.+20     	; 0xac0 <__fpcmp_parts_f+0x2e>
     aac:	11 96       	adiw	r26, 0x01	; 1
     aae:	1c 91       	ld	r17, X
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	99 f5       	brne	.+102    	; 0xb1a <__fpcmp_parts_f+0x88>
     ab4:	81 81       	ldd	r24, Z+1	; 0x01
     ab6:	68 2f       	mov	r22, r24
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	61 1b       	sub	r22, r17
     abc:	71 09       	sbc	r23, r1
     abe:	3f c0       	rjmp	.+126    	; 0xb3e <__fpcmp_parts_f+0xac>
     ac0:	84 30       	cpi	r24, 0x04	; 4
     ac2:	21 f0       	breq	.+8      	; 0xacc <__fpcmp_parts_f+0x3a>
     ac4:	92 30       	cpi	r25, 0x02	; 2
     ac6:	31 f4       	brne	.+12     	; 0xad4 <__fpcmp_parts_f+0x42>
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	b9 f1       	breq	.+110    	; 0xb3a <__fpcmp_parts_f+0xa8>
     acc:	81 81       	ldd	r24, Z+1	; 0x01
     ace:	88 23       	and	r24, r24
     ad0:	89 f1       	breq	.+98     	; 0xb34 <__fpcmp_parts_f+0xa2>
     ad2:	2d c0       	rjmp	.+90     	; 0xb2e <__fpcmp_parts_f+0x9c>
     ad4:	11 96       	adiw	r26, 0x01	; 1
     ad6:	1c 91       	ld	r17, X
     ad8:	11 97       	sbiw	r26, 0x01	; 1
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	f1 f0       	breq	.+60     	; 0xb1a <__fpcmp_parts_f+0x88>
     ade:	81 81       	ldd	r24, Z+1	; 0x01
     ae0:	18 17       	cp	r17, r24
     ae2:	d9 f4       	brne	.+54     	; 0xb1a <__fpcmp_parts_f+0x88>
     ae4:	12 96       	adiw	r26, 0x02	; 2
     ae6:	2d 91       	ld	r18, X+
     ae8:	3c 91       	ld	r19, X
     aea:	13 97       	sbiw	r26, 0x03	; 3
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	93 81       	ldd	r25, Z+3	; 0x03
     af0:	82 17       	cp	r24, r18
     af2:	93 07       	cpc	r25, r19
     af4:	94 f0       	brlt	.+36     	; 0xb1a <__fpcmp_parts_f+0x88>
     af6:	28 17       	cp	r18, r24
     af8:	39 07       	cpc	r19, r25
     afa:	bc f0       	brlt	.+46     	; 0xb2a <__fpcmp_parts_f+0x98>
     afc:	14 96       	adiw	r26, 0x04	; 4
     afe:	8d 91       	ld	r24, X+
     b00:	9d 91       	ld	r25, X+
     b02:	0d 90       	ld	r0, X+
     b04:	bc 91       	ld	r27, X
     b06:	a0 2d       	mov	r26, r0
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	46 81       	ldd	r20, Z+6	; 0x06
     b0e:	57 81       	ldd	r21, Z+7	; 0x07
     b10:	28 17       	cp	r18, r24
     b12:	39 07       	cpc	r19, r25
     b14:	4a 07       	cpc	r20, r26
     b16:	5b 07       	cpc	r21, r27
     b18:	18 f4       	brcc	.+6      	; 0xb20 <__fpcmp_parts_f+0x8e>
     b1a:	11 23       	and	r17, r17
     b1c:	41 f0       	breq	.+16     	; 0xb2e <__fpcmp_parts_f+0x9c>
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <__fpcmp_parts_f+0xa2>
     b20:	82 17       	cp	r24, r18
     b22:	93 07       	cpc	r25, r19
     b24:	a4 07       	cpc	r26, r20
     b26:	b5 07       	cpc	r27, r21
     b28:	40 f4       	brcc	.+16     	; 0xb3a <__fpcmp_parts_f+0xa8>
     b2a:	11 23       	and	r17, r17
     b2c:	19 f0       	breq	.+6      	; 0xb34 <__fpcmp_parts_f+0xa2>
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	05 c0       	rjmp	.+10     	; 0xb3e <__fpcmp_parts_f+0xac>
     b34:	6f ef       	ldi	r22, 0xFF	; 255
     b36:	7f ef       	ldi	r23, 0xFF	; 255
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <__fpcmp_parts_f+0xac>
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	cb 01       	movw	r24, r22
     b40:	1f 91       	pop	r17
     b42:	08 95       	ret

00000b44 <PasswordSet>:
 *  Created on: Oct 22, 2017
 *      Author: Abdullah
 */
#include "CTRL_MC.h"
uint8 g_UserPassword [PASSWORD_LENGTH]="12345";
void PasswordSet(){
     b44:	df 93       	push	r29
     b46:	cf 93       	push	r28
     b48:	0f 92       	push	r0
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	uint8 i =0 ;
     b4e:	19 82       	std	Y+1, r1	; 0x01
     b50:	14 c0       	rjmp	.+40     	; 0xb7a <PasswordSet+0x36>
	while (i<PASSWORD_LENGTH){
		EEPROM_Write_Byte(MEMORY_START_ADDRESS+i, g_UserPassword[i]);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	8f 5e       	subi	r24, 0xEF	; 239
     b5a:	9c 4f       	sbci	r25, 0xFC	; 252
     b5c:	ac 01       	movw	r20, r24
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	e8 59       	subi	r30, 0x98	; 152
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	20 81       	ld	r18, Z
     b6c:	ca 01       	movw	r24, r20
     b6e:	62 2f       	mov	r22, r18
     b70:	0e 94 61 06 	call	0xcc2	; 0xcc2 <EEPROM_Write_Byte>
		i++;}
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	89 83       	std	Y+1, r24	; 0x01
 */
#include "CTRL_MC.h"
uint8 g_UserPassword [PASSWORD_LENGTH]="12345";
void PasswordSet(){
	uint8 i =0 ;
	while (i<PASSWORD_LENGTH){
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	85 30       	cpi	r24, 0x05	; 5
     b7e:	48 f3       	brcs	.-46     	; 0xb52 <PasswordSet+0xe>
		EEPROM_Write_Byte(MEMORY_START_ADDRESS+i, g_UserPassword[i]);
		i++;}
}
     b80:	0f 90       	pop	r0
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <PasswordGet>:
void PasswordGet(uint8* pass){
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <PasswordGet+0x6>
     b8e:	0f 92       	push	r0
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	9b 83       	std	Y+3, r25	; 0x03
     b96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0 ;
     b98:	19 82       	std	Y+1, r1	; 0x01
     b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <PasswordGet+0x3c>
		while (i<PASSWORD_LENGTH){
			EEPROM_Read_Byte(MEMORY_START_ADDRESS+i,pass+i);
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	8f 5e       	subi	r24, 0xEF	; 239
     ba4:	9c 4f       	sbci	r25, 0xFC	; 252
     ba6:	ac 01       	movw	r20, r24
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	28 0f       	add	r18, r24
     bb4:	39 1f       	adc	r19, r25
     bb6:	ca 01       	movw	r24, r20
     bb8:	b9 01       	movw	r22, r18
     bba:	0e 94 a2 06 	call	0xd44	; 0xd44 <EEPROM_Read_Byte>
			i++;}
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_Write_Byte(MEMORY_START_ADDRESS+i, g_UserPassword[i]);
		i++;}
}
void PasswordGet(uint8* pass){
	uint8 i =0 ;
		while (i<PASSWORD_LENGTH){
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	48 f3       	brcs	.-46     	; 0xb9c <PasswordGet+0x14>
			EEPROM_Read_Byte(MEMORY_START_ADDRESS+i,pass+i);
			i++;}

}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <UnlockDoor>:
void UnlockDoor (){
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_1);
     bde:	a5 e3       	ldi	r26, 0x35	; 53
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e5 e3       	ldi	r30, 0x35	; 53
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8b 7f       	andi	r24, 0xFB	; 251
     bea:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_REG,MOTOR_PIN_2);
     bec:	a5 e3       	ldi	r26, 0x35	; 53
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e5 e3       	ldi	r30, 0x35	; 53
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 60       	ori	r24, 0x08	; 8
     bf8:	8c 93       	st	X, r24
	Timer_SetTime(10);
     bfa:	8a e0       	ldi	r24, 0x0A	; 10
     bfc:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer_SetTime>
		Timer_start();
     c00:	0e 94 3c 09 	call	0x1278	; 0x1278 <Timer_start>
	while(g_TimePassed == 0);
     c04:	80 91 6e 01 	lds	r24, 0x016E
     c08:	88 23       	and	r24, r24
     c0a:	e1 f3       	breq	.-8      	; 0xc04 <UnlockDoor+0x2e>
	Timer_stop();
     c0c:	0e 94 4a 09 	call	0x1294	; 0x1294 <Timer_stop>
	g_TimePassed =0;
     c10:	10 92 6e 01 	sts	0x016E, r1
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_2);
     c14:	a5 e3       	ldi	r26, 0x35	; 53
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e5 e3       	ldi	r30, 0x35	; 53
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_REG,MOTOR_PIN_1);
     c22:	a5 e3       	ldi	r26, 0x35	; 53
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e5 e3       	ldi	r30, 0x35	; 53
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	84 60       	ori	r24, 0x04	; 4
     c2e:	8c 93       	st	X, r24
	Timer_SetTime(10);
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer_SetTime>
	Timer_start();
     c36:	0e 94 3c 09 	call	0x1278	; 0x1278 <Timer_start>
	while(g_TimePassed == 0);
     c3a:	80 91 6e 01 	lds	r24, 0x016E
     c3e:	88 23       	and	r24, r24
     c40:	e1 f3       	breq	.-8      	; 0xc3a <UnlockDoor+0x64>
	g_TimePassed =0;
     c42:	10 92 6e 01 	sts	0x016E, r1
	Timer_stop();
     c46:	0e 94 4a 09 	call	0x1294	; 0x1294 <Timer_stop>
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_1);
     c4a:	a5 e3       	ldi	r26, 0x35	; 53
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e3       	ldi	r30, 0x35	; 53
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_2);
     c58:	a5 e3       	ldi	r26, 0x35	; 53
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e5 e3       	ldi	r30, 0x35	; 53
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	87 7f       	andi	r24, 0xF7	; 247
     c64:	8c 93       	st	X, r24

}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <Buzzer>:
void Buzzer () {
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	Timer_SetTime(90);
     c74:	8a e5       	ldi	r24, 0x5A	; 90
     c76:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timer_SetTime>
	SET_BIT(BUZZER_PORT_REG,BUZZER_PIN);
     c7a:	a2 e3       	ldi	r26, 0x32	; 50
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e2 e3       	ldi	r30, 0x32	; 50
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	8c 93       	st	X, r24
	Timer_start();
     c88:	0e 94 3c 09 	call	0x1278	; 0x1278 <Timer_start>
		while(g_TimePassed ==0);
     c8c:	80 91 6e 01 	lds	r24, 0x016E
     c90:	88 23       	and	r24, r24
     c92:	e1 f3       	breq	.-8      	; 0xc8c <Buzzer+0x20>
		g_TimePassed = 0;
     c94:	10 92 6e 01 	sts	0x016E, r1
		Timer_stop();
     c98:	0e 94 4a 09 	call	0x1294	; 0x1294 <Timer_stop>
		CLEAR_BIT(BUZZER_PORT_REG,BUZZER_PIN);
     c9c:	a2 e3       	ldi	r26, 0x32	; 50
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e2 e3       	ldi	r30, 0x32	; 50
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8b 7f       	andi	r24, 0xFB	; 251
     ca8:	8c 93       	st	X, r24



}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <EEPROM_Init>:
 * Author: Mohamed Tarek
 */ 
#include "External_EEPROM.h"

void EEPROM_Init(void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	TWI_Init(); // just initialize the TWI module inside the MC
     cb8:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_Init>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <EEPROM_Write_Byte>:

uint8 EEPROM_Write_Byte(uint16 u16addr, uint8 u8data)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <EEPROM_Write_Byte+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <EEPROM_Write_Byte+0x8>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
     cd4:	0e 94 18 07 	call	0xe30	; 0xe30 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
     cd8:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	11 f0       	breq	.+4      	; 0xce4 <EEPROM_Write_Byte+0x22>
        return ERROR;
     ce0:	1c 82       	std	Y+4, r1	; 0x04
     ce2:	28 c0       	rjmp	.+80     	; 0xd34 <EEPROM_Write_Byte+0x72>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	80 70       	andi	r24, 0x00	; 0
     cea:	97 70       	andi	r25, 0x07	; 7
     cec:	88 0f       	add	r24, r24
     cee:	89 2f       	mov	r24, r25
     cf0:	88 1f       	adc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	91 95       	neg	r25
     cf6:	80 6a       	ori	r24, 0xA0	; 160
     cf8:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
     cfc:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d00:	88 31       	cpi	r24, 0x18	; 24
     d02:	11 f0       	breq	.+4      	; 0xd08 <EEPROM_Write_Byte+0x46>
        return ERROR; 
     d04:	1c 82       	std	Y+4, r1	; 0x04
     d06:	16 c0       	rjmp	.+44     	; 0xd34 <EEPROM_Write_Byte+0x72>
		 
    //send the required location address
    TWI_Write((uint8)(u16addr));
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
     d0e:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d12:	88 32       	cpi	r24, 0x28	; 40
     d14:	11 f0       	breq	.+4      	; 0xd1a <EEPROM_Write_Byte+0x58>
        return ERROR;
     d16:	1c 82       	std	Y+4, r1	; 0x04
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <EEPROM_Write_Byte+0x72>
		
    //write byte to eeprom
    TWI_Write(u8data);
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
     d20:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d24:	88 32       	cpi	r24, 0x28	; 40
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_Write_Byte+0x6a>
        return ERROR;
     d28:	1c 82       	std	Y+4, r1	; 0x04
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <EEPROM_Write_Byte+0x72>
		
    TWI_Stop();
     d2c:	0e 94 28 07 	call	0xe50	; 0xe50 <TWI_Stop>
	
    return SUCCESS;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	8c 83       	std	Y+4, r24	; 0x04
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <EEPROM_Read_Byte>:

uint8 EEPROM_Read_Byte(uint16 u16addr, uint8 *u8data)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <EEPROM_Read_Byte+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <EEPROM_Read_Byte+0x8>
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	7c 83       	std	Y+4, r23	; 0x04
     d58:	6b 83       	std	Y+3, r22	; 0x03
    TWI_Start();
     d5a:	0e 94 18 07 	call	0xe30	; 0xe30 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
     d5e:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	11 f0       	breq	.+4      	; 0xd6a <EEPROM_Read_Byte+0x26>
        return ERROR;
     d66:	1d 82       	std	Y+5, r1	; 0x05
     d68:	44 c0       	rjmp	.+136    	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	80 70       	andi	r24, 0x00	; 0
     d70:	97 70       	andi	r25, 0x07	; 7
     d72:	88 0f       	add	r24, r24
     d74:	89 2f       	mov	r24, r25
     d76:	88 1f       	adc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	91 95       	neg	r25
     d7c:	80 6a       	ori	r24, 0xA0	; 160
     d7e:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
     d82:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d86:	88 31       	cpi	r24, 0x18	; 24
     d88:	11 f0       	breq	.+4      	; 0xd8e <EEPROM_Read_Byte+0x4a>
        return ERROR;
     d8a:	1d 82       	std	Y+5, r1	; 0x05
     d8c:	32 c0       	rjmp	.+100    	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    //send the required location address
    TWI_Write((uint8)(u16addr));
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
     d94:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     d98:	88 32       	cpi	r24, 0x28	; 40
     d9a:	11 f0       	breq	.+4      	; 0xda0 <EEPROM_Read_Byte+0x5c>
        return ERROR;
     d9c:	1d 82       	std	Y+5, r1	; 0x05
     d9e:	29 c0       	rjmp	.+82     	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    //send a repeated start
    TWI_Start();
     da0:	0e 94 18 07 	call	0xe30	; 0xe30 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
     da4:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     da8:	80 31       	cpi	r24, 0x10	; 16
     daa:	11 f0       	breq	.+4      	; 0xdb0 <EEPROM_Read_Byte+0x6c>
        return ERROR;
     dac:	1d 82       	std	Y+5, r1	; 0x05
     dae:	21 c0       	rjmp	.+66     	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	80 70       	andi	r24, 0x00	; 0
     db6:	97 70       	andi	r25, 0x07	; 7
     db8:	88 0f       	add	r24, r24
     dba:	89 2f       	mov	r24, r25
     dbc:	88 1f       	adc	r24, r24
     dbe:	99 0b       	sbc	r25, r25
     dc0:	91 95       	neg	r25
     dc2:	81 6a       	ori	r24, 0xA1	; 161
     dc4:	0e 94 33 07 	call	0xe66	; 0xe66 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
     dc8:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     dcc:	80 34       	cpi	r24, 0x40	; 64
     dce:	11 f0       	breq	.+4      	; 0xdd4 <EEPROM_Read_Byte+0x90>
        return ERROR;
     dd0:	1d 82       	std	Y+5, r1	; 0x05
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    *u8data = TWI_Read_With_NACK();
     dd4:	0e 94 5d 07 	call	0xeba	; 0xeba <TWI_Read_With_NACK>
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	80 83       	st	Z, r24
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
     dde:	0e 94 70 07 	call	0xee0	; 0xee0 <TWI_Get_Status>
     de2:	88 35       	cpi	r24, 0x58	; 88
     de4:	11 f0       	breq	.+4      	; 0xdea <EEPROM_Read_Byte+0xa6>
        return ERROR;
     de6:	1d 82       	std	Y+5, r1	; 0x05
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <EEPROM_Read_Byte+0xae>
		
    TWI_Stop();
     dea:	0e 94 28 07 	call	0xe50	; 0xe50 <TWI_Stop>
    return SUCCESS;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8d 83       	std	Y+5, r24	; 0x05
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <TWI_Init>:
 * Author: Mohamed Tarek
 */ 
#include "i2c.h"

void TWI_Init(void)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     e0c:	e0 e2       	ldi	r30, 0x20	; 32
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	80 83       	st	Z, r24
	TWSR = 0x00;
     e14:	e1 e2       	ldi	r30, 0x21	; 33
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     e1a:	e2 e2       	ldi	r30, 0x22	; 34
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     e22:	e6 e5       	ldi	r30, 0x56	; 86
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	80 83       	st	Z, r24
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <TWI_Start>:

void TWI_Start(void)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	84 ea       	ldi	r24, 0xA4	; 164
     e3e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	dc f7       	brge	.-10     	; 0xe40 <TWI_Start+0x10>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <TWI_Stop>:

void TWI_Stop(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e58:	e6 e5       	ldi	r30, 0x56	; 86
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	84 e9       	ldi	r24, 0x94	; 148
     e5e:	80 83       	st	Z, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <TWI_Write>:

void TWI_Write(uint8 data)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e72:	e3 e2       	ldi	r30, 0x23	; 35
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     e7a:	e6 e5       	ldi	r30, 0x56	; 86
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	84 e8       	ldi	r24, 0x84	; 132
     e80:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e82:	e6 e5       	ldi	r30, 0x56	; 86
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	88 23       	and	r24, r24
     e8a:	dc f7       	brge	.-10     	; 0xe82 <TWI_Write+0x1c>
}
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <TWI_Read_With_ACK>:

uint8 TWI_Read_With_ACK(void)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e9c:	e6 e5       	ldi	r30, 0x56	; 86
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	84 ec       	ldi	r24, 0xC4	; 196
     ea2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	88 23       	and	r24, r24
     eac:	dc f7       	brge	.-10     	; 0xea4 <TWI_Read_With_ACK+0x10>
    /* Read Data */
    return TWDR;
     eae:	e3 e2       	ldi	r30, 0x23	; 35
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <TWI_Read_With_NACK>:

uint8 TWI_Read_With_NACK(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     ec2:	e6 e5       	ldi	r30, 0x56	; 86
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	84 e8       	ldi	r24, 0x84	; 132
     ec8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     eca:	e6 e5       	ldi	r30, 0x56	; 86
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 23       	and	r24, r24
     ed2:	dc f7       	brge	.-10     	; 0xeca <TWI_Read_With_NACK+0x10>
    /* Read Data */
    return TWDR;
     ed4:	e3 e2       	ldi	r30, 0x23	; 35
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <TWI_Get_Status>:

uint8 TWI_Get_Status(void)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     eea:	e1 e2       	ldi	r30, 0x21	; 33
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	88 7f       	andi	r24, 0xF8	; 248
     ef2:	89 83       	std	Y+1, r24	; 0x01
    return status;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <main>:
 *  Created on: Oct 22, 2017
 *      Author: Abdullah
 */

#include "CTRL_MC.h"
int main() {
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	UART_init();
     f08:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <UART_init>
	EEPROM_Init();
     f0c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EEPROM_Init>
	Timer_init();
     f10:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <Timer_init>
	PasswordSet();
     f14:	0e 94 a2 05 	call	0xb44	; 0xb44 <PasswordSet>
	MOTOR_DDR_REG |=(1<<MOTOR_PIN_1)|(1<<MOTOR_PIN_2);
     f18:	a4 e3       	ldi	r26, 0x34	; 52
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e4 e3       	ldi	r30, 0x34	; 52
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8c 60       	ori	r24, 0x0C	; 12
     f24:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_1);
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_REG,MOTOR_PIN_2);
     f34:	a5 e3       	ldi	r26, 0x35	; 53
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e5 e3       	ldi	r30, 0x35	; 53
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	87 7f       	andi	r24, 0xF7	; 247
     f40:	8c 93       	st	X, r24
	SET_BIT(BUZZER_DDR,BUZZER_PIN);
     f42:	a1 e3       	ldi	r26, 0x31	; 49
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e1 e3       	ldi	r30, 0x31	; 49
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	8c 93       	st	X, r24
	CLEAR_BIT(BUZZER_PORT_REG,BUZZER_PIN);
     f50:	a2 e3       	ldi	r26, 0x32	; 50
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8b 7f       	andi	r24, 0xFB	; 251
     f5c:	8c 93       	st	X, r24
	UART_sendByte(CONTROL_MC_READY);
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
while (1){
	uint8 Byte =UART_recieveByte();
     f64:	0e 94 8d 09 	call	0x131a	; 0x131a <UART_recieveByte>
     f68:	89 83       	std	Y+1, r24	; 0x01
	if(Byte == GET_PASSWORD){
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	88 23       	and	r24, r24
     f6e:	99 f4       	brne	.+38     	; 0xf96 <main+0x98>
		PORTA=0;
     f70:	eb e3       	ldi	r30, 0x3B	; 59
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	10 82       	st	Z, r1
		PasswordGet(g_UserPassword);
     f76:	88 e6       	ldi	r24, 0x68	; 104
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 c4 05 	call	0xb88	; 0xb88 <PasswordGet>
		UART_sendByte(CONTROL_MC_READY);
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
		UARTString(g_UserPassword);
     f84:	88 e6       	ldi	r24, 0x68	; 104
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	0e 94 65 08 	call	0x10ca	; 0x10ca <UARTString>
		UART_sendString(g_UserPassword);
     f8c:	88 e6       	ldi	r24, 0x68	; 104
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 9c 09 	call	0x1338	; 0x1338 <UART_sendString>
     f94:	e7 cf       	rjmp	.-50     	; 0xf64 <main+0x66>
	}
	else if(Byte==CHANGE_PASSWORD){
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	69 f4       	brne	.+26     	; 0xfb6 <main+0xb8>

		UART_sendByte(CONTROL_MC_READY);
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
		UART_receiveString(g_UserPassword);
     fa2:	88 e6       	ldi	r24, 0x68	; 104
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 c5 09 	call	0x138a	; 0x138a <UART_receiveString>
		PasswordSet();
     faa:	0e 94 a2 05 	call	0xb44	; 0xb44 <PasswordSet>
		UART_sendByte(MC2_DONE);
     fae:	85 e0       	ldi	r24, 0x05	; 5
     fb0:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
     fb4:	d7 cf       	rjmp	.-82     	; 0xf64 <main+0x66>
	}
	else if (Byte == UNLOCK_DOOR)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	31 f4       	brne	.+12     	; 0xfc8 <main+0xca>
	{	UART_sendByte(CONTROL_MC_READY);
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
		UnlockDoor();
     fc2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <UnlockDoor>
     fc6:	ce cf       	rjmp	.-100    	; 0xf64 <main+0x66>

	}
	else if (Byte== ERROR2){
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	84 30       	cpi	r24, 0x04	; 4
     fcc:	59 f6       	brne	.-106    	; 0xf64 <main+0x66>

		Buzzer();
     fce:	0e 94 36 06 	call	0xc6c	; 0xc6c <Buzzer>
     fd2:	c8 cf       	rjmp	.-112    	; 0xf64 <main+0x66>

00000fd4 <ComparePassword>:
 *  Created on: Oct 21, 2017
 *      Author: Abdullah
 */
#include "string.h"
 uint8 ComparePassword(uint8* str1,uint8* str2)
 {	uint8 i =0;
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <ComparePassword+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <ComparePassword+0x8>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <ComparePassword+0xa>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	8a 83       	std	Y+2, r24	; 0x02
     fe6:	7d 83       	std	Y+5, r23	; 0x05
     fe8:	6c 83       	std	Y+4, r22	; 0x04
     fea:	19 82       	std	Y+1, r1	; 0x01
     fec:	19 c0       	rjmp	.+50     	; 0x1020 <ComparePassword+0x4c>
	 while (str1[i]!='\0'){
		 if (str1[i] !=str2[i]){
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	40 81       	ld	r20, Z
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	fc 01       	movw	r30, r24
    100c:	e2 0f       	add	r30, r18
    100e:	f3 1f       	adc	r31, r19
    1010:	80 81       	ld	r24, Z
    1012:	48 17       	cp	r20, r24
    1014:	11 f0       	breq	.+4      	; 0x101a <ComparePassword+0x46>
			 return 0;}
    1016:	1e 82       	std	Y+6, r1	; 0x06
    1018:	10 c0       	rjmp	.+32     	; 0x103a <ComparePassword+0x66>
	 i++ ;}
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	89 83       	std	Y+1, r24	; 0x01
 *      Author: Abdullah
 */
#include "string.h"
 uint8 ComparePassword(uint8* str1,uint8* str2)
 {	uint8 i =0;
	 while (str1[i]!='\0'){
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	fc 01       	movw	r30, r24
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	80 81       	ld	r24, Z
    1032:	88 23       	and	r24, r24
    1034:	e1 f6       	brne	.-72     	; 0xfee <ComparePassword+0x1a>
		 if (str1[i] !=str2[i]){
			 return 0;}
	 i++ ;}
	 return 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8e 83       	std	Y+6, r24	; 0x06
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
 }
    103c:	26 96       	adiw	r28, 0x06	; 6
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <CopyString>:
 void  CopyString(uint8* str1,uint8* str2){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <CopyString+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <CopyString+0x8>
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	7d 83       	std	Y+5, r23	; 0x05
    1062:	6c 83       	std	Y+4, r22	; 0x04
	 uint8 i =0;
    1064:	19 82       	std	Y+1, r1	; 0x01
    1066:	15 c0       	rjmp	.+42     	; 0x1092 <CopyString+0x44>
	 while(str1[i] != '\0'){
		 str1[i]=str2[i];
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	dc 01       	movw	r26, r24
    1074:	a2 0f       	add	r26, r18
    1076:	b3 1f       	adc	r27, r19
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	80 81       	ld	r24, Z
    108a:	8c 93       	st	X, r24
		 i++ ;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	89 83       	std	Y+1, r24	; 0x01
	 i++ ;}
	 return 1;
 }
 void  CopyString(uint8* str1,uint8* str2){
	 uint8 i =0;
	 while(str1[i] != '\0'){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	01 f7       	brne	.-64     	; 0x1068 <CopyString+0x1a>
		 str1[i]=str2[i];
		 i++ ;
	 }
	 str2[i]='\0';
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	10 82       	st	Z, r1
 }
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <UARTString>:
void UARTString (uint8* str){
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <UARTString+0x6>
    10d0:	0f 92       	push	r0
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	9b 83       	std	Y+3, r25	; 0x03
    10d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <UARTString+0x1a>
	while(str[i] !='\0'){
		i++;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	89 83       	std	Y+1, r24	; 0x01
	 }
	 str2[i]='\0';
 }
void UARTString (uint8* str){
	uint8 i =0;
	while(str[i] !='\0'){
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	9b 81       	ldd	r25, Y+3	; 0x03
    10ee:	fc 01       	movw	r30, r24
    10f0:	e2 0f       	add	r30, r18
    10f2:	f3 1f       	adc	r31, r19
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	91 f7       	brne	.-28     	; 0x10de <UARTString+0x14>
		i++;
	}
	str[i]='#';
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	83 e2       	ldi	r24, 0x23	; 35
    110c:	80 83       	st	Z, r24

}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <__vector_8>:
#include "timer.h"
#define REQ_TICKS(SEC) ( (TCNT_MAX)-( (SEC)/(TICK_TIME) ) )/* macro to get the required ticks */

volatile uint8 g_TimePassed =0 ; /* global variable to check if time passed */
static uint8 g_TimerSecs = 0;
ISR(TIMER1_OVF_vect){
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	4f 93       	push	r20
    112e:	5f 93       	push	r21
    1130:	6f 93       	push	r22
    1132:	7f 93       	push	r23
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	g_TimePassed = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 6e 01 	sts	0x016E, r24
	TCNT1=REQ_TICKS(g_TimerSecs);
    114e:	0c e4       	ldi	r16, 0x4C	; 76
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	80 91 6f 01 	lds	r24, 0x016F
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	aa 27       	eor	r26, r26
    115c:	97 fd       	sbrc	r25, 7
    115e:	a0 95       	com	r26
    1160:	ba 2f       	mov	r27, r26
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__floatsisf>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	2a e8       	ldi	r18, 0x8A	; 138
    1174:	3b e4       	ldi	r19, 0x4B	; 75
    1176:	46 e8       	ldi	r20, 0x86	; 134
    1178:	5a eb       	ldi	r21, 0xBA	; 186
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	f8 01       	movw	r30, r16
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <Timer_init>:

void Timer_init(){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62

	/*  Normal mode COM1B0=0 COM1B1=0  COM1A0 =0 COM1A1=0
	 *  Pescaler 1024 CS12=1 CS11=0 CS10=1
	 *  enable global interrupt
	 */
	TCCR1B |= (1<<CS12) | (1<<CS10);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	85 60       	ori	r24, 0x05	; 5
    11e6:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
    11e8:	af e5       	ldi	r26, 0x5F	; 95
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ef e5       	ldi	r30, 0x5F	; 95
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 68       	ori	r24, 0x80	; 128
    11f4:	8c 93       	st	X, r24
}
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <Timer_SetTime>:
void Timer_SetTime(uint8 sec){
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
	/* set the required time and get value for TCNT1 register */
	g_TimerSecs = sec ;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	80 93 6f 01 	sts	0x016F, r24
	TCNT1 = REQ_TICKS(g_TimerSecs);
    1212:	0c e4       	ldi	r16, 0x4C	; 76
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	80 91 6f 01 	lds	r24, 0x016F
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	aa 27       	eor	r26, r26
    1220:	97 fd       	sbrc	r25, 7
    1222:	a0 95       	com	r26
    1224:	ba 2f       	mov	r27, r26
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__floatsisf>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	2a e8       	ldi	r18, 0x8A	; 138
    1238:	3b e4       	ldi	r19, 0x4B	; 75
    123a:	46 e8       	ldi	r20, 0x86	; 134
    123c:	5a eb       	ldi	r21, 0xBA	; 186
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	57 e4       	ldi	r21, 0x47	; 71
    1252:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	f8 01       	movw	r30, r16
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24
}
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <Timer_start>:
void Timer_start(void){
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	/* set the TOIE1 bit to start the timer */
	SET_BIT(TIMSK,TOIE1);
    1280:	a9 e5       	ldi	r26, 0x59	; 89
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 e5       	ldi	r30, 0x59	; 89
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	84 60       	ori	r24, 0x04	; 4
    128c:	8c 93       	st	X, r24
}
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <Timer_stop>:
void Timer_stop(void){
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	/* clear the TOIE1 bit to stop the timer */
	CLEAR_BIT(TIMSK,TOIE1);
    129c:	a9 e5       	ldi	r26, 0x59	; 89
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e9 e5       	ldi	r30, 0x59	; 89
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8b 7f       	andi	r24, 0xFB	; 251
    12a8:	8c 93       	st	X, r24
	TCNT1=0;
    12aa:	ec e4       	ldi	r30, 0x4C	; 76
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	11 82       	std	Z+1, r1	; 0x01
    12b0:	10 82       	st	Z, r1
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <UART_init>:
#include "uart.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

void UART_init(void)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    12c0:	eb e2       	ldi	r30, 0x2B	; 43
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    12c8:	ea e2       	ldi	r30, 0x2A	; 42
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	88 e1       	ldi	r24, 0x18	; 24
    12ce:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    12d0:	e0 e4       	ldi	r30, 0x40	; 64
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	86 e8       	ldi	r24, 0x86	; 134
    12d6:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    12d8:	e0 e4       	ldi	r30, 0x40	; 64
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    12de:	e9 e2       	ldi	r30, 0x29	; 41
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8c e0       	ldi	r24, 0x0C	; 12
    12e4:	80 83       	st	Z, r24
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    12f8:	eb e2       	ldi	r30, 0x2B	; 43
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	80 72       	andi	r24, 0x20	; 32
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	b9 f3       	breq	.-18     	; 0x12f8 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    130a:	ec e2       	ldi	r30, 0x2C	; 44
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1322:	eb e2       	ldi	r30, 0x2B	; 43
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 23       	and	r24, r24
    132a:	dc f7       	brge	.-10     	; 0x1322 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    132c:	ec e2       	ldi	r30, 0x2C	; 44
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
}
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <UART_sendString+0x6>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	0e c0       	rjmp	.+28     	; 0x1368 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	fc 01       	movw	r30, r24
    1358:	e2 0f       	add	r30, r18
    135a:	f3 1f       	adc	r31, r19
    135c:	80 81       	ld	r24, Z
    135e:	0e 94 76 09 	call	0x12ec	; 0x12ec <UART_sendByte>
		i++;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	9b 81       	ldd	r25, Y+3	; 0x03
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	80 81       	ld	r24, Z
    137a:	88 23       	and	r24, r24
    137c:	39 f7       	brne	.-50     	; 0x134c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	00 d0       	rcall	.+0      	; 0x1394 <UART_receiveString+0xa>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    139e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	8c 01       	movw	r16, r24
    13ac:	02 0f       	add	r16, r18
    13ae:	13 1f       	adc	r17, r19
    13b0:	0e 94 8d 09 	call	0x131a	; 0x131a <UART_recieveByte>
    13b4:	f8 01       	movw	r30, r16
    13b6:	80 83       	st	Z, r24
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	8c 01       	movw	r16, r24
    13cc:	02 0f       	add	r16, r18
    13ce:	13 1f       	adc	r17, r19
    13d0:	0e 94 8d 09 	call	0x131a	; 0x131a <UART_recieveByte>
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	fc 01       	movw	r30, r24
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	80 81       	ld	r24, Z
    13ea:	83 32       	cpi	r24, 0x23	; 35
    13ec:	31 f7       	brne	.-52     	; 0x13ba <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	9b 81       	ldd	r25, Y+3	; 0x03
    13f8:	fc 01       	movw	r30, r24
    13fa:	e2 0f       	add	r30, r18
    13fc:	f3 1f       	adc	r31, r19
    13fe:	10 82       	st	Z, r1
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <__prologue_saves__>:
    1410:	2f 92       	push	r2
    1412:	3f 92       	push	r3
    1414:	4f 92       	push	r4
    1416:	5f 92       	push	r5
    1418:	6f 92       	push	r6
    141a:	7f 92       	push	r7
    141c:	8f 92       	push	r8
    141e:	9f 92       	push	r9
    1420:	af 92       	push	r10
    1422:	bf 92       	push	r11
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	ca 1b       	sub	r28, r26
    143a:	db 0b       	sbc	r29, r27
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	09 94       	ijmp

00001448 <__epilogue_restores__>:
    1448:	2a 88       	ldd	r2, Y+18	; 0x12
    144a:	39 88       	ldd	r3, Y+17	; 0x11
    144c:	48 88       	ldd	r4, Y+16	; 0x10
    144e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1450:	6e 84       	ldd	r6, Y+14	; 0x0e
    1452:	7d 84       	ldd	r7, Y+13	; 0x0d
    1454:	8c 84       	ldd	r8, Y+12	; 0x0c
    1456:	9b 84       	ldd	r9, Y+11	; 0x0b
    1458:	aa 84       	ldd	r10, Y+10	; 0x0a
    145a:	b9 84       	ldd	r11, Y+9	; 0x09
    145c:	c8 84       	ldd	r12, Y+8	; 0x08
    145e:	df 80       	ldd	r13, Y+7	; 0x07
    1460:	ee 80       	ldd	r14, Y+6	; 0x06
    1462:	fd 80       	ldd	r15, Y+5	; 0x05
    1464:	0c 81       	ldd	r16, Y+4	; 0x04
    1466:	1b 81       	ldd	r17, Y+3	; 0x03
    1468:	aa 81       	ldd	r26, Y+2	; 0x02
    146a:	b9 81       	ldd	r27, Y+1	; 0x01
    146c:	ce 0f       	add	r28, r30
    146e:	d1 1d       	adc	r29, r1
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	ed 01       	movw	r28, r26
    147c:	08 95       	ret

0000147e <_exit>:
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
