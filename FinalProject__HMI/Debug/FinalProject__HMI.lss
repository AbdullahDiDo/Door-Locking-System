
FinalProject__HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c6  00800060  000030d6  0000316a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800226  00800226  00003330  2**0
                  ALLOC
  3 .stab         00002b44  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3f  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000934f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000ba60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000bd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <main>
      8a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e1       	ldi	r26, 0x1D	; 29
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e1       	ldi	r24, 0x1D	; 29
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e1       	ldi	r22, 0x1D	; 29
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 18 	jmp	0x3022	; 0x3022 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 18 	jmp	0x302a	; 0x302a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 5d       	subi	r30, 0xDB	; 219
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <GetUserPassword>:
 */
#include "HMI_MC.h"
/* use-password */
 uint8 g_UserPassword[PASSWORD_LENGTH]  ;

void GetUserPassword(){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
		UART_sendByte(GET_PASSWORD);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <UART_sendByte>
		while(UART_recieveByte() != CONTROL_MC_READY);
     e06:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <GetUserPassword+0xe>
		UART_receiveString(g_UserPassword);
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <UART_receiveString>
		}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <EnterPassword>:
uint8 EnterPassword(void){
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	a8 97       	sbiw	r28, 0x28	; 40
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
	uint8 a_PasswordLength =0;
     e30:	18 a2       	std	Y+32, r1	; 0x20
	uint8 i =0;
     e32:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 a_key;
	uint8 a_UserPassword1[5];
	LCD_displayString("Enter Password:");
     e34:	80 e6       	ldi	r24, 0x60	; 96
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_goToRowColumn(1,0);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
     e44:	85 c0       	rjmp	.+266    	; 0xf50 <EnterPassword+0x134>
	while (a_PasswordLength++ < PASSWORD_LENGTH){
			a_key = KeyPad_getPressedKey();
     e46:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
     e4a:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_displayCharacter('*');
     e4c:	8a e2       	ldi	r24, 0x2A	; 42
     e4e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
			a_UserPassword1[i++] =a_key;
     e52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	ce 01       	movw	r24, r28
     e5a:	81 96       	adiw	r24, 0x21	; 33
     e5c:	fc 01       	movw	r30, r24
     e5e:	e2 0f       	add	r30, r18
     e60:	f3 1f       	adc	r31, r19
     e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e64:	80 83       	st	Z, r24
     e66:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	8f 8f       	std	Y+31, r24	; 0x1f
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	aa ef       	ldi	r26, 0xFA	; 250
     e72:	b3 e4       	ldi	r27, 0x43	; 67
     e74:	89 8f       	std	Y+25, r24	; 0x19
     e76:	9a 8f       	std	Y+26, r25	; 0x1a
     e78:	ab 8f       	std	Y+27, r26	; 0x1b
     e7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	69 8d       	ldd	r22, Y+25	; 0x19
     e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a e7       	ldi	r20, 0x7A	; 122
     e8a:	53 e4       	ldi	r21, 0x43	; 67
     e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	8d 8b       	std	Y+21, r24	; 0x15
     e96:	9e 8b       	std	Y+22, r25	; 0x16
     e98:	af 8b       	std	Y+23, r26	; 0x17
     e9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <EnterPassword+0xa2>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9c 8b       	std	Y+20, r25	; 0x14
     eba:	8b 8b       	std	Y+19, r24	; 0x13
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <EnterPassword+0x120>
	else if (__tmp > 65535)
     ebe:	6d 89       	ldd	r22, Y+21	; 0x15
     ec0:	7e 89       	ldd	r23, Y+22	; 0x16
     ec2:	8f 89       	ldd	r24, Y+23	; 0x17
     ec4:	98 8d       	ldd	r25, Y+24	; 0x18
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <EnterPassword+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	69 8d       	ldd	r22, Y+25	; 0x19
     ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9c 8b       	std	Y+20, r25	; 0x14
     efc:	8b 8b       	std	Y+19, r24	; 0x13
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <EnterPassword+0x102>
     f00:	89 e1       	ldi	r24, 0x19	; 25
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f08:	89 89       	ldd	r24, Y+17	; 0x11
     f0a:	9a 89       	ldd	r25, Y+18	; 0x12
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <EnterPassword+0xf0>
     f10:	9a 8b       	std	Y+18, r25	; 0x12
     f12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	8b 89       	ldd	r24, Y+19	; 0x13
     f16:	9c 89       	ldd	r25, Y+20	; 0x14
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	9c 8b       	std	Y+20, r25	; 0x14
     f1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	8b 89       	ldd	r24, Y+19	; 0x13
     f20:	9c 89       	ldd	r25, Y+20	; 0x14
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f7       	brne	.-38     	; 0xf00 <EnterPassword+0xe4>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <EnterPassword+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f28:	6d 89       	ldd	r22, Y+21	; 0x15
     f2a:	7e 89       	ldd	r23, Y+22	; 0x16
     f2c:	8f 89       	ldd	r24, Y+23	; 0x17
     f2e:	98 8d       	ldd	r25, Y+24	; 0x18
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
     f3c:	8b 89       	ldd	r24, Y+19	; 0x13
     f3e:	9c 89       	ldd	r25, Y+20	; 0x14
     f40:	98 8b       	std	Y+16, r25	; 0x10
     f42:	8f 87       	std	Y+15, r24	; 0x0f
     f44:	8f 85       	ldd	r24, Y+15	; 0x0f
     f46:	98 89       	ldd	r25, Y+16	; 0x10
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <EnterPassword+0x12c>
     f4c:	98 8b       	std	Y+16, r25	; 0x10
     f4e:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 i =0;
	uint8 a_key;
	uint8 a_UserPassword1[5];
	LCD_displayString("Enter Password:");
	LCD_goToRowColumn(1,0);
	while (a_PasswordLength++ < PASSWORD_LENGTH){
     f50:	18 a6       	std	Y+40, r1	; 0x28
     f52:	88 a1       	ldd	r24, Y+32	; 0x20
     f54:	85 30       	cpi	r24, 0x05	; 5
     f56:	10 f4       	brcc	.+4      	; 0xf5c <EnterPassword+0x140>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	88 a7       	std	Y+40, r24	; 0x28
     f5c:	88 a1       	ldd	r24, Y+32	; 0x20
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	88 a3       	std	Y+32, r24	; 0x20
     f62:	88 a5       	ldd	r24, Y+40	; 0x28
     f64:	88 23       	and	r24, r24
     f66:	09 f0       	breq	.+2      	; 0xf6a <EnterPassword+0x14e>
     f68:	6e cf       	rjmp	.-292    	; 0xe46 <EnterPassword+0x2a>
			a_key = KeyPad_getPressedKey();
			LCD_displayCharacter('*');
			a_UserPassword1[i++] =a_key;
			_delay_ms(500);}
	a_UserPassword1[i]='\0';
     f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	ce 01       	movw	r24, r28
     f72:	81 96       	adiw	r24, 0x21	; 33
     f74:	fc 01       	movw	r30, r24
     f76:	e2 0f       	add	r30, r18
     f78:	f3 1f       	adc	r31, r19
     f7a:	10 82       	st	Z, r1
	a_PasswordLength =0;
     f7c:	18 a2       	std	Y+32, r1	; 0x20
	i =0;
     f7e:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 j =1 ;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();
     f84:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
	LCD_displayString("Again Please:");
     f90:	80 e7       	ldi	r24, 0x70	; 112
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_goToRowColumn(1,0);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
     fa0:	88 c0       	rjmp	.+272    	; 0x10b2 <EnterPassword+0x296>
	while (a_PasswordLength++ < PASSWORD_LENGTH){
					a_key = KeyPad_getPressedKey();
     fa2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
     fa6:	8e 8f       	std	Y+30, r24	; 0x1e
					if(a_key !=a_UserPassword1[i])
     fa8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ce 01       	movw	r24, r28
     fb0:	81 96       	adiw	r24, 0x21	; 33
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	90 81       	ld	r25, Z
     fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fbc:	98 17       	cp	r25, r24
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <EnterPassword+0x1a6>
						j=0;
     fc0:	1d 8e       	std	Y+29, r1	; 0x1d
					LCD_displayCharacter('*');
     fc2:	8a e2       	ldi	r24, 0x2A	; 42
     fc4:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
					i++;
     fc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	8f 8f       	std	Y+31, r24	; 0x1f
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	aa ef       	ldi	r26, 0xFA	; 250
     fd4:	b3 e4       	ldi	r27, 0x43	; 67
     fd6:	8b 87       	std	Y+11, r24	; 0x0b
     fd8:	9c 87       	std	Y+12, r25	; 0x0c
     fda:	ad 87       	std	Y+13, r26	; 0x0d
     fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fde:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	4a e7       	ldi	r20, 0x7A	; 122
     fec:	53 e4       	ldi	r21, 0x43	; 67
     fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	a9 87       	std	Y+9, r26	; 0x09
     ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    1000:	78 85       	ldd	r23, Y+8	; 0x08
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1012:	88 23       	and	r24, r24
    1014:	2c f4       	brge	.+10     	; 0x1020 <EnterPassword+0x204>
		__ticks = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	3f c0       	rjmp	.+126    	; 0x109e <EnterPassword+0x282>
	else if (__tmp > 65535)
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	4f e7       	ldi	r20, 0x7F	; 127
    102e:	57 e4       	ldi	r21, 0x47	; 71
    1030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1034:	18 16       	cp	r1, r24
    1036:	4c f5       	brge	.+82     	; 0x108a <EnterPassword+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1038:	6b 85       	ldd	r22, Y+11	; 0x0b
    103a:	7c 85       	ldd	r23, Y+12	; 0x0c
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e2       	ldi	r20, 0x20	; 32
    1046:	51 e4       	ldi	r21, 0x41	; 65
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	bc 01       	movw	r22, r24
    1052:	cd 01       	movw	r24, r26
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <EnterPassword+0x264>
    1062:	89 e1       	ldi	r24, 0x19	; 25
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <EnterPassword+0x252>
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	69 f7       	brne	.-38     	; 0x1062 <EnterPassword+0x246>
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <EnterPassword+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108a:	6f 81       	ldd	r22, Y+7	; 0x07
    108c:	78 85       	ldd	r23, Y+8	; 0x08
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	9e 83       	std	Y+6, r25	; 0x06
    109c:	8d 83       	std	Y+5, r24	; 0x05
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <EnterPassword+0x28e>
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
	uint8 j =1 ;
	LCD_clearScreen();
	LCD_goToRowColumn(0,0);
	LCD_displayString("Again Please:");
	LCD_goToRowColumn(1,0);
	while (a_PasswordLength++ < PASSWORD_LENGTH){
    10b2:	1f a2       	std	Y+39, r1	; 0x27
    10b4:	88 a1       	ldd	r24, Y+32	; 0x20
    10b6:	85 30       	cpi	r24, 0x05	; 5
    10b8:	10 f4       	brcc	.+4      	; 0x10be <EnterPassword+0x2a2>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	8f a3       	std	Y+39, r24	; 0x27
    10be:	88 a1       	ldd	r24, Y+32	; 0x20
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	88 a3       	std	Y+32, r24	; 0x20
    10c4:	8f a1       	ldd	r24, Y+39	; 0x27
    10c6:	88 23       	and	r24, r24
    10c8:	09 f0       	breq	.+2      	; 0x10cc <EnterPassword+0x2b0>
    10ca:	6b cf       	rjmp	.-298    	; 0xfa2 <EnterPassword+0x186>
						j=0;
					LCD_displayCharacter('*');
					i++;
				_delay_ms(500);}

	LCD_clearScreen();
    10cc:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>

	if(j && ComparePassword(a_UserPassword1,g_UserPassword))
    10d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d2:	88 23       	and	r24, r24
    10d4:	61 f0       	breq	.+24     	; 0x10ee <EnterPassword+0x2d2>
    10d6:	ce 01       	movw	r24, r28
    10d8:	81 96       	adiw	r24, 0x21	; 33
    10da:	28 e2       	ldi	r18, 0x28	; 40
    10dc:	32 e0       	ldi	r19, 0x02	; 2
    10de:	b9 01       	movw	r22, r18
    10e0:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ComparePassword>
    10e4:	88 23       	and	r24, r24
    10e6:	19 f0       	breq	.+6      	; 0x10ee <EnterPassword+0x2d2>
	{
		return 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8e a3       	std	Y+38, r24	; 0x26
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <EnterPassword+0x2d4>
	}

	return 0;
    10ee:	1e a2       	std	Y+38, r1	; 0x26
    10f0:	8e a1       	ldd	r24, Y+38	; 0x26
}
    10f2:	a8 96       	adiw	r28, 0x28	; 40
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <MainMenu>:
uint8 MainMenu(){
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <MainMenu+0x6>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	uint8 a_key ;
	LCD_goToRowColumn(0,0);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
	LCD_displayString("*:Change Password");
    1116:	8e e7       	ldi	r24, 0x7E	; 126
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	LCD_goToRowColumn(2,0);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
	LCD_displayString("#:Unlock door");
    1126:	80 e9       	ldi	r24, 0x90	; 144
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	a_key=KeyPad_getPressedKey();
    112e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
    1132:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    1134:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	if(a_key =='*')
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	8a 32       	cpi	r24, 0x2A	; 42
    113c:	19 f4       	brne	.+6      	; 0x1144 <MainMenu+0x40>
		return CHANGE_PASSWORD;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <MainMenu+0x44>
	else
		return UNLOCK_DOOR;
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <UnlockDoor>:
void UnlockDoor(){
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	68 97       	sbiw	r28, 0x18	; 24
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
	LCD_goToRowColumn(0,0);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
	uint8 a_PasswordLength =0;
    1170:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 a_UserPassword[PASSWORD_LENGTH];
	uint8 a_key ;
	uint8 i =0;
    1172:	18 8a       	std	Y+16, r1	; 0x10
	uint8 j =0;
    1174:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("Please re-enter Password:");
    1176:	8e e9       	ldi	r24, 0x9E	; 158
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    117e:	bf c0       	rjmp	.+382    	; 0x12fe <UnlockDoor+0x1aa>
	while (j<3){
	while (a_PasswordLength++ < PASSWORD_LENGTH){
					a_key = KeyPad_getPressedKey();
    1180:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
    1184:	89 8b       	std	Y+17, r24	; 0x11
					LCD_displayCharacter('*');
    1186:	8a e2       	ldi	r24, 0x2A	; 42
    1188:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
					a_UserPassword[i++] =a_key;
    118c:	88 89       	ldd	r24, Y+16	; 0x10
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ce 01       	movw	r24, r28
    1194:	43 96       	adiw	r24, 0x13	; 19
    1196:	fc 01       	movw	r30, r24
    1198:	e2 0f       	add	r30, r18
    119a:	f3 1f       	adc	r31, r19
    119c:	89 89       	ldd	r24, Y+17	; 0x11
    119e:	80 83       	st	Z, r24
    11a0:	88 89       	ldd	r24, Y+16	; 0x10
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	88 8b       	std	Y+16, r24	; 0x10
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	aa ef       	ldi	r26, 0xFA	; 250
    11ac:	b3 e4       	ldi	r27, 0x43	; 67
    11ae:	8b 87       	std	Y+11, r24	; 0x0b
    11b0:	9c 87       	std	Y+12, r25	; 0x0c
    11b2:	ad 87       	std	Y+13, r26	; 0x0d
    11b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8f 83       	std	Y+7, r24	; 0x07
    11d0:	98 87       	std	Y+8, r25	; 0x08
    11d2:	a9 87       	std	Y+9, r26	; 0x09
    11d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <UnlockDoor+0xa4>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <UnlockDoor+0x122>
	else if (__tmp > 65535)
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <UnlockDoor+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6b 85       	ldd	r22, Y+11	; 0x0b
    1212:	7c 85       	ldd	r23, Y+12	; 0x0c
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <UnlockDoor+0x104>
    123a:	89 e1       	ldi	r24, 0x19	; 25
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <UnlockDoor+0xf2>
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <UnlockDoor+0xe6>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <UnlockDoor+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <UnlockDoor+0x12e>
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
	uint8 a_key ;
	uint8 i =0;
	uint8 j =0;
	LCD_displayString("Please re-enter Password:");
	while (j<3){
	while (a_PasswordLength++ < PASSWORD_LENGTH){
    128a:	18 8e       	std	Y+24, r1	; 0x18
    128c:	8a 89       	ldd	r24, Y+18	; 0x12
    128e:	85 30       	cpi	r24, 0x05	; 5
    1290:	10 f4       	brcc	.+4      	; 0x1296 <UnlockDoor+0x142>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	88 8f       	std	Y+24, r24	; 0x18
    1296:	8a 89       	ldd	r24, Y+18	; 0x12
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	8a 8b       	std	Y+18, r24	; 0x12
    129c:	88 8d       	ldd	r24, Y+24	; 0x18
    129e:	88 23       	and	r24, r24
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <UnlockDoor+0x150>
    12a2:	6e cf       	rjmp	.-292    	; 0x1180 <UnlockDoor+0x2c>
					a_key = KeyPad_getPressedKey();
					LCD_displayCharacter('*');
					a_UserPassword[i++] =a_key;
					_delay_ms(500);}
	if (ComparePassword(a_UserPassword,g_UserPassword))
    12a4:	ce 01       	movw	r24, r28
    12a6:	43 96       	adiw	r24, 0x13	; 19
    12a8:	28 e2       	ldi	r18, 0x28	; 40
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	b9 01       	movw	r22, r18
    12ae:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ComparePassword>
    12b2:	88 23       	and	r24, r24
    12b4:	09 f1       	breq	.+66     	; 0x12f8 <UnlockDoor+0x1a4>
		{LCD_clearScreen();
    12b6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
		LCD_displayString("Door is unlocking ...");
    12c2:	88 eb       	ldi	r24, 0xB8	; 184
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
		UART_sendByte(UNLOCK_DOOR);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <UART_sendByte>
		while(UART_recieveByte() != CONTROL_MC_READY);
    12d0:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <UnlockDoor+0x17c>
		Timer_SetTime(20);
    12d8:	84 e1       	ldi	r24, 0x14	; 20
    12da:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <Timer_SetTime>
		Timer_start();
    12de:	0e 94 21 17 	call	0x2e42	; 0x2e42 <Timer_start>
		while(g_TimePassed ==0);
    12e2:	80 91 26 02 	lds	r24, 0x0226
    12e6:	88 23       	and	r24, r24
    12e8:	e1 f3       	breq	.-8      	; 0x12e2 <UnlockDoor+0x18e>
		g_TimePassed =0;
    12ea:	10 92 26 02 	sts	0x0226, r1
		Timer_stop();
    12ee:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <Timer_stop>
		LCD_clearScreen();
    12f2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <UnlockDoor+0x1b8>
		return ;
	}j++;
    12f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 a_UserPassword[PASSWORD_LENGTH];
	uint8 a_key ;
	uint8 i =0;
	uint8 j =0;
	LCD_displayString("Please re-enter Password:");
	while (j<3){
    12fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	18 f2       	brcs	.-122    	; 0x128a <UnlockDoor+0x136>
		g_TimePassed =0;
		Timer_stop();
		LCD_clearScreen();
		return ;
	}j++;
}LCD_clearScreen();
    1304:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	Buzzer();
    1308:	0e 94 8f 09 	call	0x131e	; 0x131e <Buzzer>
	}
    130c:	68 96       	adiw	r28, 0x18	; 24
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <Buzzer>:
void Buzzer (){
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1326:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
	LCD_displayString("ERROR");
    132a:	8e ec       	ldi	r24, 0xCE	; 206
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
	UART_sendByte(ERROR);
    1332:	84 e0       	ldi	r24, 0x04	; 4
    1334:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <UART_sendByte>
	Timer_SetTime(90);
    1338:	8a e5       	ldi	r24, 0x5A	; 90
    133a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <Timer_SetTime>
		Timer_start();
    133e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <Timer_start>
	while(g_TimePassed == 0);
    1342:	80 91 26 02 	lds	r24, 0x0226
    1346:	88 23       	and	r24, r24
    1348:	e1 f3       	breq	.-8      	; 0x1342 <Buzzer+0x24>
	g_TimePassed =0 ;
    134a:	10 92 26 02 	sts	0x0226, r1
	Timer_stop();
    134e:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <Timer_stop>
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <ChangePassword>:
void ChangePassword(void){
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	e4 97       	sbiw	r28, 0x34	; 52
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
	uint8 a_PasswordLength =0;
    136c:	1d a6       	std	Y+45, r1	; 0x2d
	uint8 i=0;
    136e:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 a_key ;
	uint8 a_UserPassword[PASSWORD_LENGTH];
	LCD_displayString("Please enter old password:");
    1370:	84 ed       	ldi	r24, 0xD4	; 212
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    1378:	85 c0       	rjmp	.+266    	; 0x1484 <ChangePassword+0x12c>
	while (a_PasswordLength++ < PASSWORD_LENGTH){
					a_key = KeyPad_getPressedKey();
    137a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
    137e:	8b a7       	std	Y+43, r24	; 0x2b
					a_UserPassword[i] =a_key;
    1380:	8c a5       	ldd	r24, Y+44	; 0x2c
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	ce 01       	movw	r24, r28
    1388:	8e 96       	adiw	r24, 0x2e	; 46
    138a:	fc 01       	movw	r30, r24
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	8b a5       	ldd	r24, Y+43	; 0x2b
    1392:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    1394:	8a e2       	ldi	r24, 0x2A	; 42
    1396:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
					i++;
    139a:	8c a5       	ldd	r24, Y+44	; 0x2c
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8c a7       	std	Y+44, r24	; 0x2c
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	aa ef       	ldi	r26, 0xFA	; 250
    13a6:	b3 e4       	ldi	r27, 0x43	; 67
    13a8:	8f a3       	std	Y+39, r24	; 0x27
    13aa:	98 a7       	std	Y+40, r25	; 0x28
    13ac:	a9 a7       	std	Y+41, r26	; 0x29
    13ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	6f a1       	ldd	r22, Y+39	; 0x27
    13b2:	78 a5       	ldd	r23, Y+40	; 0x28
    13b4:	89 a5       	ldd	r24, Y+41	; 0x29
    13b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a e7       	ldi	r20, 0x7A	; 122
    13be:	53 e4       	ldi	r21, 0x43	; 67
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8b a3       	std	Y+35, r24	; 0x23
    13ca:	9c a3       	std	Y+36, r25	; 0x24
    13cc:	ad a3       	std	Y+37, r26	; 0x25
    13ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13d0:	6b a1       	ldd	r22, Y+35	; 0x23
    13d2:	7c a1       	ldd	r23, Y+36	; 0x24
    13d4:	8d a1       	ldd	r24, Y+37	; 0x25
    13d6:	9e a1       	ldd	r25, Y+38	; 0x26
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <ChangePassword+0x9a>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9a a3       	std	Y+34, r25	; 0x22
    13ee:	89 a3       	std	Y+33, r24	; 0x21
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <ChangePassword+0x118>
	else if (__tmp > 65535)
    13f2:	6b a1       	ldd	r22, Y+35	; 0x23
    13f4:	7c a1       	ldd	r23, Y+36	; 0x24
    13f6:	8d a1       	ldd	r24, Y+37	; 0x25
    13f8:	9e a1       	ldd	r25, Y+38	; 0x26
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <ChangePassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	6f a1       	ldd	r22, Y+39	; 0x27
    140c:	78 a5       	ldd	r23, Y+40	; 0x28
    140e:	89 a5       	ldd	r24, Y+41	; 0x29
    1410:	9a a5       	ldd	r25, Y+42	; 0x2a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9a a3       	std	Y+34, r25	; 0x22
    1430:	89 a3       	std	Y+33, r24	; 0x21
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <ChangePassword+0xfa>
    1434:	89 e1       	ldi	r24, 0x19	; 25
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	98 a3       	std	Y+32, r25	; 0x20
    143a:	8f 8f       	std	Y+31, r24	; 0x1f
    143c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    143e:	98 a1       	ldd	r25, Y+32	; 0x20
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <ChangePassword+0xe8>
    1444:	98 a3       	std	Y+32, r25	; 0x20
    1446:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	89 a1       	ldd	r24, Y+33	; 0x21
    144a:	9a a1       	ldd	r25, Y+34	; 0x22
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9a a3       	std	Y+34, r25	; 0x22
    1450:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	89 a1       	ldd	r24, Y+33	; 0x21
    1454:	9a a1       	ldd	r25, Y+34	; 0x22
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <ChangePassword+0xdc>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <ChangePassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9a a3       	std	Y+34, r25	; 0x22
    146e:	89 a3       	std	Y+33, r24	; 0x21
    1470:	89 a1       	ldd	r24, Y+33	; 0x21
    1472:	9a a1       	ldd	r25, Y+34	; 0x22
    1474:	9e 8f       	std	Y+30, r25	; 0x1e
    1476:	8d 8f       	std	Y+29, r24	; 0x1d
    1478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <ChangePassword+0x124>
    1480:	9e 8f       	std	Y+30, r25	; 0x1e
    1482:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 a_PasswordLength =0;
	uint8 i=0;
	uint8 a_key ;
	uint8 a_UserPassword[PASSWORD_LENGTH];
	LCD_displayString("Please enter old password:");
	while (a_PasswordLength++ < PASSWORD_LENGTH){
    1484:	1c aa       	std	Y+52, r1	; 0x34
    1486:	8d a5       	ldd	r24, Y+45	; 0x2d
    1488:	85 30       	cpi	r24, 0x05	; 5
    148a:	10 f4       	brcc	.+4      	; 0x1490 <ChangePassword+0x138>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	8c ab       	std	Y+52, r24	; 0x34
    1490:	8d a5       	ldd	r24, Y+45	; 0x2d
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	8d a7       	std	Y+45, r24	; 0x2d
    1496:	8c a9       	ldd	r24, Y+52	; 0x34
    1498:	88 23       	and	r24, r24
    149a:	09 f0       	breq	.+2      	; 0x149e <ChangePassword+0x146>
    149c:	6e cf       	rjmp	.-292    	; 0x137a <ChangePassword+0x22>
					a_key = KeyPad_getPressedKey();
					a_UserPassword[i] =a_key;
					LCD_displayCharacter('*');
					i++;
					_delay_ms(500);}
					a_UserPassword[i]='\0';
    149e:	8c a5       	ldd	r24, Y+44	; 0x2c
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	ce 01       	movw	r24, r28
    14a6:	8e 96       	adiw	r24, 0x2e	; 46
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	10 82       	st	Z, r1
					i=0;
    14b0:	1c a6       	std	Y+44, r1	; 0x2c
					a_PasswordLength=0;
    14b2:	1d a6       	std	Y+45, r1	; 0x2d
					if(ComparePassword(a_UserPassword,g_UserPassword)){
    14b4:	ce 01       	movw	r24, r28
    14b6:	8e 96       	adiw	r24, 0x2e	; 46
    14b8:	28 e2       	ldi	r18, 0x28	; 40
    14ba:	32 e0       	ldi	r19, 0x02	; 2
    14bc:	b9 01       	movw	r22, r18
    14be:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ComparePassword>
    14c2:	88 23       	and	r24, r24
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <ChangePassword+0x170>
    14c6:	34 c1       	rjmp	.+616    	; 0x1730 <ChangePassword+0x3d8>
						LCD_clearScreen();
    14c8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
						LCD_displayString("Please enter New Password:");
    14cc:	8f ee       	ldi	r24, 0xEF	; 239
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    14d4:	85 c0       	rjmp	.+266    	; 0x15e0 <ChangePassword+0x288>
						while (a_PasswordLength++ < PASSWORD_LENGTH){
									a_key = KeyPad_getPressedKey();
    14d6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KeyPad_getPressedKey>
    14da:	8b a7       	std	Y+43, r24	; 0x2b
									a_UserPassword[i] =a_key;
    14dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	ce 01       	movw	r24, r28
    14e4:	8e 96       	adiw	r24, 0x2e	; 46
    14e6:	fc 01       	movw	r30, r24
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ee:	80 83       	st	Z, r24
									LCD_displayCharacter('*');
    14f0:	8a e2       	ldi	r24, 0x2A	; 42
    14f2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
									i++;
    14f6:	8c a5       	ldd	r24, Y+44	; 0x2c
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	8c a7       	std	Y+44, r24	; 0x2c
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	aa ef       	ldi	r26, 0xFA	; 250
    1502:	b3 e4       	ldi	r27, 0x43	; 67
    1504:	89 8f       	std	Y+25, r24	; 0x19
    1506:	9a 8f       	std	Y+26, r25	; 0x1a
    1508:	ab 8f       	std	Y+27, r26	; 0x1b
    150a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	4a e7       	ldi	r20, 0x7A	; 122
    151a:	53 e4       	ldi	r21, 0x43	; 67
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	8d 8b       	std	Y+21, r24	; 0x15
    1526:	9e 8b       	std	Y+22, r25	; 0x16
    1528:	af 8b       	std	Y+23, r26	; 0x17
    152a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e8       	ldi	r20, 0x80	; 128
    153a:	5f e3       	ldi	r21, 0x3F	; 63
    153c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1540:	88 23       	and	r24, r24
    1542:	2c f4       	brge	.+10     	; 0x154e <ChangePassword+0x1f6>
		__ticks = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 8b       	std	Y+20, r25	; 0x14
    154a:	8b 8b       	std	Y+19, r24	; 0x13
    154c:	3f c0       	rjmp	.+126    	; 0x15cc <ChangePassword+0x274>
	else if (__tmp > 65535)
    154e:	6d 89       	ldd	r22, Y+21	; 0x15
    1550:	7e 89       	ldd	r23, Y+22	; 0x16
    1552:	8f 89       	ldd	r24, Y+23	; 0x17
    1554:	98 8d       	ldd	r25, Y+24	; 0x18
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	3f ef       	ldi	r19, 0xFF	; 255
    155a:	4f e7       	ldi	r20, 0x7F	; 127
    155c:	57 e4       	ldi	r21, 0x47	; 71
    155e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1562:	18 16       	cp	r1, r24
    1564:	4c f5       	brge	.+82     	; 0x15b8 <ChangePassword+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1566:	69 8d       	ldd	r22, Y+25	; 0x19
    1568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9c 8b       	std	Y+20, r25	; 0x14
    158c:	8b 8b       	std	Y+19, r24	; 0x13
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <ChangePassword+0x256>
    1590:	89 e1       	ldi	r24, 0x19	; 25
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a 8b       	std	Y+18, r25	; 0x12
    1596:	89 8b       	std	Y+17, r24	; 0x11
    1598:	89 89       	ldd	r24, Y+17	; 0x11
    159a:	9a 89       	ldd	r25, Y+18	; 0x12
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <ChangePassword+0x244>
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	69 f7       	brne	.-38     	; 0x1590 <ChangePassword+0x238>
    15b6:	14 c0       	rjmp	.+40     	; 0x15e0 <ChangePassword+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	8b 89       	ldd	r24, Y+19	; 0x13
    15ce:	9c 89       	ldd	r25, Y+20	; 0x14
    15d0:	98 8b       	std	Y+16, r25	; 0x10
    15d2:	8f 87       	std	Y+15, r24	; 0x0f
    15d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d6:	98 89       	ldd	r25, Y+16	; 0x10
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <ChangePassword+0x280>
    15dc:	98 8b       	std	Y+16, r25	; 0x10
    15de:	8f 87       	std	Y+15, r24	; 0x0f
					i=0;
					a_PasswordLength=0;
					if(ComparePassword(a_UserPassword,g_UserPassword)){
						LCD_clearScreen();
						LCD_displayString("Please enter New Password:");
						while (a_PasswordLength++ < PASSWORD_LENGTH){
    15e0:	1b aa       	std	Y+51, r1	; 0x33
    15e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    15e4:	85 30       	cpi	r24, 0x05	; 5
    15e6:	10 f4       	brcc	.+4      	; 0x15ec <ChangePassword+0x294>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	8b ab       	std	Y+51, r24	; 0x33
    15ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    15ee:	8f 5f       	subi	r24, 0xFF	; 255
    15f0:	8d a7       	std	Y+45, r24	; 0x2d
    15f2:	8b a9       	ldd	r24, Y+51	; 0x33
    15f4:	88 23       	and	r24, r24
    15f6:	09 f0       	breq	.+2      	; 0x15fa <ChangePassword+0x2a2>
    15f8:	6e cf       	rjmp	.-292    	; 0x14d6 <ChangePassword+0x17e>
									a_key = KeyPad_getPressedKey();
									a_UserPassword[i] =a_key;
									LCD_displayCharacter('*');
									i++;
									_delay_ms(500);}
						a_UserPassword[i]='\0';
    15fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	ce 01       	movw	r24, r28
    1602:	8e 96       	adiw	r24, 0x2e	; 46
    1604:	fc 01       	movw	r30, r24
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	10 82       	st	Z, r1
						LCD_goToRowColumn(3,0);
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
						LCD_clearScreen();
    1614:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
						UART_sendByte(CHANGE_PASSWORD);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <UART_sendByte>
						while (UART_recieveByte() != CONTROL_MC_READY);
    161e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	e1 f7       	brne	.-8      	; 0x161e <ChangePassword+0x2c6>
						UARTString(a_UserPassword);
    1626:	ce 01       	movw	r24, r28
    1628:	8e 96       	adiw	r24, 0x2e	; 46
    162a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <UARTString>
						UART_sendString(a_UserPassword);
    162e:	ce 01       	movw	r24, r28
    1630:	8e 96       	adiw	r24, 0x2e	; 46
    1632:	0e 94 81 17 	call	0x2f02	; 0x2f02 <UART_sendString>
						LCD_displayString("Password Changed !");
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	aa ef       	ldi	r26, 0xFA	; 250
    1644:	b3 e4       	ldi	r27, 0x43	; 67
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ad 87       	std	Y+13, r26	; 0x0d
    164c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a e7       	ldi	r20, 0x7A	; 122
    165c:	53 e4       	ldi	r21, 0x43	; 67
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8f 83       	std	Y+7, r24	; 0x07
    1668:	98 87       	std	Y+8, r25	; 0x08
    166a:	a9 87       	std	Y+9, r26	; 0x09
    166c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <ChangePassword+0x338>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	3f c0       	rjmp	.+126    	; 0x170e <ChangePassword+0x3b6>
	else if (__tmp > 65535)
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <ChangePassword+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <ChangePassword+0x398>
    16d2:	89 e1       	ldi	r24, 0x19	; 25
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <ChangePassword+0x386>
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <ChangePassword+0x37a>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <ChangePassword+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <ChangePassword+0x3c2>
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						while(UART_recieveByte()!=MC2_DONE);
    1722:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
    1726:	85 30       	cpi	r24, 0x05	; 5
    1728:	e1 f7       	brne	.-8      	; 0x1722 <ChangePassword+0x3ca>
						LCD_clearScreen();
    172a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <LCD_clearScreen>
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <ChangePassword+0x3dc>
						return;
					}Buzzer();
    1730:	0e 94 8f 09 	call	0x131e	; 0x131e <Buzzer>
}
    1734:	e4 96       	adiw	r28, 0x34	; 52
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <KeyPad_getPressedKey>:
 */
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif

/************************** Functions Definitions **********************/
uint8 KeyPad_getPressedKey(void){
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <KeyPad_getPressedKey+0x6>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	4c c0       	rjmp	.+152    	; 0x17ec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1754:	ea e3       	ldi	r30, 0x3A	; 58
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	80 e1       	ldi	r24, 0x10	; 16
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <KeyPad_getPressedKey+0x22>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	2a 95       	dec	r18
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <KeyPad_getPressedKey+0x1e>
    176c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <KeyPad_getPressedKey+0x3e>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <KeyPad_getPressedKey+0x3a>
    1788:	80 95       	com	r24
    178a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	28 c0       	rjmp	.+80     	; 0x17e0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1790:	e9 e3       	ldi	r30, 0x39	; 57
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <KeyPad_getPressedKey+0x62>
    17a4:	55 95       	asr	r21
    17a6:	47 95       	ror	r20
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <KeyPad_getPressedKey+0x5e>
    17ac:	ca 01       	movw	r24, r20
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	91 f4       	brne	.+36     	; 0x17da <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	98 2f       	mov	r25, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	89 0f       	add	r24, r25
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	a8 f2       	brcs	.-86     	; 0x1790 <KeyPad_getPressedKey+0x4a>
/************************** Functions Definitions **********************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	8a 83       	std	Y+2, r24	; 0x02
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	84 30       	cpi	r24, 0x04	; 4
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <KeyPad_getPressedKey+0xae>
    17f2:	b0 cf       	rjmp	.-160    	; 0x1754 <KeyPad_getPressedKey+0xe>
    17f4:	ad cf       	rjmp	.-166    	; 0x1750 <KeyPad_getPressedKey+0xa>

000017f6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <KeyPad_4x4_adjustKeyNumber+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <KeyPad_4x4_adjustKeyNumber+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	2b 83       	std	Y+3, r18	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	88 30       	cpi	r24, 0x08	; 8
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <KeyPad_4x4_adjustKeyNumber+0x24>
    1818:	70 c0       	rjmp	.+224    	; 0x18fa <KeyPad_4x4_adjustKeyNumber+0x104>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	29 30       	cpi	r18, 0x09	; 9
    1820:	31 05       	cpc	r19, r1
    1822:	5c f5       	brge	.+86     	; 0x187a <KeyPad_4x4_adjustKeyNumber+0x84>
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	91 05       	cpc	r25, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <KeyPad_4x4_adjustKeyNumber+0x3a>
    182e:	59 c0       	rjmp	.+178    	; 0x18e2 <KeyPad_4x4_adjustKeyNumber+0xec>
    1830:	2b 81       	ldd	r18, Y+3	; 0x03
    1832:	3c 81       	ldd	r19, Y+4	; 0x04
    1834:	25 30       	cpi	r18, 0x05	; 5
    1836:	31 05       	cpc	r19, r1
    1838:	9c f4       	brge	.+38     	; 0x1860 <KeyPad_4x4_adjustKeyNumber+0x6a>
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <KeyPad_4x4_adjustKeyNumber+0x50>
    1844:	48 c0       	rjmp	.+144    	; 0x18d6 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	23 30       	cpi	r18, 0x03	; 3
    184c:	31 05       	cpc	r19, r1
    184e:	0c f0       	brlt	.+2      	; 0x1852 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1850:	45 c0       	rjmp	.+138    	; 0x18dc <KeyPad_4x4_adjustKeyNumber+0xe6>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <KeyPad_4x4_adjustKeyNumber+0x68>
    185c:	39 c0       	rjmp	.+114    	; 0x18d0 <KeyPad_4x4_adjustKeyNumber+0xda>
    185e:	68 c0       	rjmp	.+208    	; 0x1930 <KeyPad_4x4_adjustKeyNumber+0x13a>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	26 30       	cpi	r18, 0x06	; 6
    1866:	31 05       	cpc	r19, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <KeyPad_4x4_adjustKeyNumber+0x76>
    186a:	41 c0       	rjmp	.+130    	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0xf8>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	87 30       	cpi	r24, 0x07	; 7
    1872:	91 05       	cpc	r25, r1
    1874:	0c f0       	brlt	.+2      	; 0x1878 <KeyPad_4x4_adjustKeyNumber+0x82>
    1876:	3e c0       	rjmp	.+124    	; 0x18f4 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1878:	37 c0       	rjmp	.+110    	; 0x18e8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    187a:	2b 81       	ldd	r18, Y+3	; 0x03
    187c:	3c 81       	ldd	r19, Y+4	; 0x04
    187e:	2c 30       	cpi	r18, 0x0C	; 12
    1880:	31 05       	cpc	r19, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <KeyPad_4x4_adjustKeyNumber+0x90>
    1884:	46 c0       	rjmp	.+140    	; 0x1912 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	8d 30       	cpi	r24, 0x0D	; 13
    188c:	91 05       	cpc	r25, r1
    188e:	5c f4       	brge	.+22     	; 0x18a6 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1890:	2b 81       	ldd	r18, Y+3	; 0x03
    1892:	3c 81       	ldd	r19, Y+4	; 0x04
    1894:	2a 30       	cpi	r18, 0x0A	; 10
    1896:	31 05       	cpc	r19, r1
    1898:	b1 f1       	breq	.+108    	; 0x1906 <KeyPad_4x4_adjustKeyNumber+0x110>
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	8b 30       	cpi	r24, 0x0B	; 11
    18a0:	91 05       	cpc	r25, r1
    18a2:	a4 f5       	brge	.+104    	; 0x190c <KeyPad_4x4_adjustKeyNumber+0x116>
    18a4:	2d c0       	rjmp	.+90     	; 0x1900 <KeyPad_4x4_adjustKeyNumber+0x10a>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	2e 30       	cpi	r18, 0x0E	; 14
    18ac:	31 05       	cpc	r19, r1
    18ae:	b9 f1       	breq	.+110    	; 0x191e <KeyPad_4x4_adjustKeyNumber+0x128>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	8e 30       	cpi	r24, 0x0E	; 14
    18b6:	91 05       	cpc	r25, r1
    18b8:	7c f1       	brlt	.+94     	; 0x1918 <KeyPad_4x4_adjustKeyNumber+0x122>
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	2f 30       	cpi	r18, 0x0F	; 15
    18c0:	31 05       	cpc	r19, r1
    18c2:	81 f1       	breq	.+96     	; 0x1924 <KeyPad_4x4_adjustKeyNumber+0x12e>
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	80 31       	cpi	r24, 0x10	; 16
    18ca:	91 05       	cpc	r25, r1
    18cc:	71 f1       	breq	.+92     	; 0x192a <KeyPad_4x4_adjustKeyNumber+0x134>
    18ce:	30 c0       	rjmp	.+96     	; 0x1930 <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
		case 1: return '7';
    18d0:	97 e3       	ldi	r25, 0x37	; 55
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	2f c0       	rjmp	.+94     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: return '8';
    18d6:	28 e3       	ldi	r18, 0x38	; 56
    18d8:	2a 83       	std	Y+2, r18	; 0x02
    18da:	2c c0       	rjmp	.+88     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: return '9';
    18dc:	39 e3       	ldi	r19, 0x39	; 57
    18de:	3a 83       	std	Y+2, r19	; 0x02
    18e0:	29 c0       	rjmp	.+82     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: return '%'; // ASCII Code of %
    18e2:	85 e2       	ldi	r24, 0x25	; 37
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	26 c0       	rjmp	.+76     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: return '4';
    18e8:	94 e3       	ldi	r25, 0x34	; 52
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	23 c0       	rjmp	.+70     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: return '5';
    18ee:	25 e3       	ldi	r18, 0x35	; 53
    18f0:	2a 83       	std	Y+2, r18	; 0x02
    18f2:	20 c0       	rjmp	.+64     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: return '6';
    18f4:	36 e3       	ldi	r19, 0x36	; 54
    18f6:	3a 83       	std	Y+2, r19	; 0x02
    18f8:	1d c0       	rjmp	.+58     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    18fa:	8a e2       	ldi	r24, 0x2A	; 42
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	1a c0       	rjmp	.+52     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: return '1';
    1900:	91 e3       	ldi	r25, 0x31	; 49
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	17 c0       	rjmp	.+46     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: return '2';
    1906:	22 e3       	ldi	r18, 0x32	; 50
    1908:	2a 83       	std	Y+2, r18	; 0x02
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: return '3';
    190c:	33 e3       	ldi	r19, 0x33	; 51
    190e:	3a 83       	std	Y+2, r19	; 0x02
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1912:	8d e2       	ldi	r24, 0x2D	; 45
    1914:	8a 83       	std	Y+2, r24	; 0x02
    1916:	0e c0       	rjmp	.+28     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: return '13';  /* ASCII of Enter */
    1918:	93 e3       	ldi	r25, 0x33	; 51
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	0b c0       	rjmp	.+22     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: return '0';
    191e:	20 e3       	ldi	r18, 0x30	; 48
    1920:	2a 83       	std	Y+2, r18	; 0x02
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1924:	3d e3       	ldi	r19, 0x3D	; 61
    1926:	3a 83       	std	Y+2, r19	; 0x02
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: return '#'; /* ASCII Code of '+' */
    192a:	83 e2       	ldi	r24, 0x23	; 35
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <KeyPad_4x4_adjustKeyNumber+0x13e>
				break;
		default: return button_number;								 						
    1930:	99 81       	ldd	r25, Y+1	; 0x01
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    194c:	a1 e3       	ldi	r26, 0x31	; 49
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e1 e3       	ldi	r30, 0x31	; 49
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 67       	ori	r24, 0x70	; 112
    1958:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    195a:	a4 e3       	ldi	r26, 0x34	; 52
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e4 e3       	ldi	r30, 0x34	; 52
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 6f       	ori	r24, 0xF0	; 240
    1966:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    196e:	88 e2       	ldi	r24, 0x28	; 40
    1970:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	c3 56       	subi	r28, 0x63	; 99
    1994:	d0 40       	sbci	r29, 0x00	; 0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 59       	subi	r30, 0x9D	; 157
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    19a8:	a2 e3       	ldi	r26, 0x32	; 50
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    19b6:	a2 e3       	ldi	r26, 0x32	; 50
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7d       	andi	r24, 0xDF	; 223
    19c2:	8c 93       	st	X, r24
    19c4:	fe 01       	movw	r30, r28
    19c6:	e1 5a       	subi	r30, 0xA1	; 161
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e8       	ldi	r26, 0x80	; 128
    19d0:	bf e3       	ldi	r27, 0x3F	; 63
    19d2:	80 83       	st	Z, r24
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	a2 83       	std	Z+2, r26	; 0x02
    19d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19da:	8e 01       	movw	r16, r28
    19dc:	05 5a       	subi	r16, 0xA5	; 165
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e1 5a       	subi	r30, 0xA1	; 161
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	a2 83       	std	Z+2, r26	; 0x02
    1a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e5 5a       	subi	r30, 0xA5	; 165
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	44 f4       	brge	.+16     	; 0x1a36 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1a26:	fe 01       	movw	r30, r28
    1a28:	e7 5a       	subi	r30, 0xA7	; 167
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
    1a34:	64 c0       	rjmp	.+200    	; 0x1afe <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1a36:	fe 01       	movw	r30, r28
    1a38:	e5 5a       	subi	r30, 0xA5	; 165
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	3f ef       	ldi	r19, 0xFF	; 255
    1a48:	4f e7       	ldi	r20, 0x7F	; 127
    1a4a:	57 e4       	ldi	r21, 0x47	; 71
    1a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a50:	18 16       	cp	r1, r24
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <LCD_sendCommand+0xd0>
    1a54:	43 c0       	rjmp	.+134    	; 0x1adc <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	fe 01       	movw	r30, r28
    1a58:	e1 5a       	subi	r30, 0xA1	; 161
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	60 81       	ld	r22, Z
    1a5e:	71 81       	ldd	r23, Z+1	; 0x01
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	93 81       	ldd	r25, Z+3	; 0x03
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8e 01       	movw	r16, r28
    1a76:	07 5a       	subi	r16, 0xA7	; 167
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	f8 01       	movw	r30, r16
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
    1a8c:	1f c0       	rjmp	.+62     	; 0x1acc <LCD_sendCommand+0x146>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e9 5a       	subi	r30, 0xA9	; 169
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	89 e1       	ldi	r24, 0x19	; 25
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 5a       	subi	r30, 0xA9	; 169
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_sendCommand+0x120>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e9 5a       	subi	r30, 0xA9	; 169
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	de 01       	movw	r26, r28
    1ab6:	a7 5a       	subi	r26, 0xA7	; 167
    1ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	e7 5a       	subi	r30, 0xA7	; 167
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	11 96       	adiw	r26, 0x01	; 1
    1ac8:	9c 93       	st	X, r25
    1aca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	fe 01       	movw	r30, r28
    1ace:	e7 5a       	subi	r30, 0xA7	; 167
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	d1 f6       	brne	.-76     	; 0x1a8e <LCD_sendCommand+0x108>
    1ada:	27 c0       	rjmp	.+78     	; 0x1b2a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	8e 01       	movw	r16, r28
    1ade:	07 5a       	subi	r16, 0xA7	; 167
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e5 5a       	subi	r30, 0xA5	; 165
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	f8 01       	movw	r30, r16
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
    1afe:	de 01       	movw	r26, r28
    1b00:	ab 5a       	subi	r26, 0xAB	; 171
    1b02:	bf 4f       	sbci	r27, 0xFF	; 255
    1b04:	fe 01       	movw	r30, r28
    1b06:	e7 5a       	subi	r30, 0xA7	; 167
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	8d 93       	st	X+, r24
    1b10:	9c 93       	st	X, r25
    1b12:	fe 01       	movw	r30, r28
    1b14:	eb 5a       	subi	r30, 0xAB	; 171
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_sendCommand+0x196>
    1b20:	fe 01       	movw	r30, r28
    1b22:	eb 5a       	subi	r30, 0xAB	; 171
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b2a:	a2 e3       	ldi	r26, 0x32	; 50
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e2 e3       	ldi	r30, 0x32	; 50
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 64       	ori	r24, 0x40	; 64
    1b36:	8c 93       	st	X, r24
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ef 5a       	subi	r30, 0xAF	; 175
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	8e 01       	movw	r16, r28
    1b50:	03 5b       	subi	r16, 0xB3	; 179
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	ef 5a       	subi	r30, 0xAF	; 175
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	53 e4       	ldi	r21, 0x43	; 67
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	a2 83       	std	Z+2, r26	; 0x02
    1b7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 5b       	subi	r30, 0xB3	; 179
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	44 f4       	brge	.+16     	; 0x1baa <LCD_sendCommand+0x224>
		__ticks = 1;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5b       	subi	r30, 0xB5	; 181
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	64 c0       	rjmp	.+200    	; 0x1c72 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1baa:	fe 01       	movw	r30, r28
    1bac:	e3 5b       	subi	r30, 0xB3	; 179
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <LCD_sendCommand+0x244>
    1bc8:	43 c0       	rjmp	.+134    	; 0x1c50 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ef 5a       	subi	r30, 0xAF	; 175
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8e 01       	movw	r16, r28
    1bea:	05 5b       	subi	r16, 0xB5	; 181
    1bec:	1f 4f       	sbci	r17, 0xFF	; 255
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <LCD_sendCommand+0x2ba>
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 5b       	subi	r30, 0xB7	; 183
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	89 e1       	ldi	r24, 0x19	; 25
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	fe 01       	movw	r30, r28
    1c12:	e7 5b       	subi	r30, 0xB7	; 183
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_sendCommand+0x294>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e7 5b       	subi	r30, 0xB7	; 183
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	de 01       	movw	r26, r28
    1c2a:	a5 5b       	subi	r26, 0xB5	; 181
    1c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e5 5b       	subi	r30, 0xB5	; 181
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	9c 93       	st	X, r25
    1c3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e5 5b       	subi	r30, 0xB5	; 181
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	d1 f6       	brne	.-76     	; 0x1c02 <LCD_sendCommand+0x27c>
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	8e 01       	movw	r16, r28
    1c52:	05 5b       	subi	r16, 0xB5	; 181
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	e3 5b       	subi	r30, 0xB3	; 179
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	de 01       	movw	r26, r28
    1c74:	a9 5b       	subi	r26, 0xB9	; 185
    1c76:	bf 4f       	sbci	r27, 0xFF	; 255
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	8d 93       	st	X+, r24
    1c84:	9c 93       	st	X, r25
    1c86:	fe 01       	movw	r30, r28
    1c88:	e9 5b       	subi	r30, 0xB9	; 185
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_sendCommand+0x30a>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e9 5b       	subi	r30, 0xB9	; 185
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command & 0xF0);
    1c9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ed 59       	subi	r30, 0x9D	; 157
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 7f       	andi	r24, 0xF0	; 240
    1cac:	8c 93       	st	X, r24
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 5b       	subi	r30, 0xBD	; 189
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	80 83       	st	Z, r24
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	a2 83       	std	Z+2, r26	; 0x02
    1cc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	8e 01       	movw	r16, r28
    1cc6:	01 5c       	subi	r16, 0xC1	; 193
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 5b       	subi	r30, 0xBD	; 189
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a e7       	ldi	r20, 0x7A	; 122
    1cde:	53 e4       	ldi	r21, 0x43	; 67
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	80 83       	st	Z, r24
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ff 96       	adiw	r30, 0x3f	; 63
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_sendCommand+0x392>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e af       	std	Y+62, r25	; 0x3e
    1d14:	8d af       	std	Y+61, r24	; 0x3d
    1d16:	46 c0       	rjmp	.+140    	; 0x1da4 <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ff 96       	adiw	r30, 0x3f	; 63
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	64 f5       	brge	.+88     	; 0x1d8c <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 5b       	subi	r30, 0xBD	; 189
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e af       	std	Y+62, r25	; 0x3e
    1d60:	8d af       	std	Y+61, r24	; 0x3d
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_sendCommand+0x3fc>
    1d64:	89 e1       	ldi	r24, 0x19	; 25
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9c af       	std	Y+60, r25	; 0x3c
    1d6a:	8b af       	std	Y+59, r24	; 0x3b
    1d6c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_sendCommand+0x3ea>
    1d74:	9c af       	std	Y+60, r25	; 0x3c
    1d76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9e af       	std	Y+62, r25	; 0x3e
    1d80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_sendCommand+0x3de>
    1d8a:	16 c0       	rjmp	.+44     	; 0x1db8 <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ff 96       	adiw	r30, 0x3f	; 63
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e af       	std	Y+62, r25	; 0x3e
    1da2:	8d af       	std	Y+61, r24	; 0x3d
    1da4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1da6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1da8:	9a af       	std	Y+58, r25	; 0x3a
    1daa:	89 af       	std	Y+57, r24	; 0x39
    1dac:	89 ad       	ldd	r24, Y+57	; 0x39
    1dae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <LCD_sendCommand+0x42a>
    1db4:	9a af       	std	Y+58, r25	; 0x3a
    1db6:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((command >> 4) & 0x0F);
		#endif

		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 7b       	andi	r24, 0xBF	; 191
    1dc4:	8c 93       	st	X, r24
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e8       	ldi	r26, 0x80	; 128
    1dcc:	bf e3       	ldi	r27, 0x3F	; 63
    1dce:	8d ab       	std	Y+53, r24	; 0x35
    1dd0:	9e ab       	std	Y+54, r25	; 0x36
    1dd2:	af ab       	std	Y+55, r26	; 0x37
    1dd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dda:	8f a9       	ldd	r24, Y+55	; 0x37
    1ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	53 e4       	ldi	r21, 0x43	; 67
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	89 ab       	std	Y+49, r24	; 0x31
    1df0:	9a ab       	std	Y+50, r25	; 0x32
    1df2:	ab ab       	std	Y+51, r26	; 0x33
    1df4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <LCD_sendCommand+0x492>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	98 ab       	std	Y+48, r25	; 0x30
    1e14:	8f a7       	std	Y+47, r24	; 0x2f
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <LCD_sendCommand+0x510>
	else if (__tmp > 65535)
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <LCD_sendCommand+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6d a9       	ldd	r22, Y+53	; 0x35
    1e32:	7e a9       	ldd	r23, Y+54	; 0x36
    1e34:	8f a9       	ldd	r24, Y+55	; 0x37
    1e36:	98 ad       	ldd	r25, Y+56	; 0x38
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <LCD_sendCommand+0x4f2>
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9e a7       	std	Y+46, r25	; 0x2e
    1e60:	8d a7       	std	Y+45, r24	; 0x2d
    1e62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_sendCommand+0x4e0>
    1e6a:	9e a7       	std	Y+46, r25	; 0x2e
    1e6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <LCD_sendCommand+0x4d4>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <LCD_sendCommand+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	7a a9       	ldd	r23, Y+50	; 0x32
    1e86:	8b a9       	ldd	r24, Y+51	; 0x33
    1e88:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	9c a7       	std	Y+44, r25	; 0x2c
    1e9c:	8b a7       	std	Y+43, r24	; 0x2b
    1e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <LCD_sendCommand+0x51c>
    1ea6:	9c a7       	std	Y+44, r25	; 0x2c
    1ea8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1eaa:	a2 e3       	ldi	r26, 0x32	; 50
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e2 e3       	ldi	r30, 0x32	; 50
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 64       	ori	r24, 0x40	; 64
    1eb6:	8c 93       	st	X, r24
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8f a3       	std	Y+39, r24	; 0x27
    1ec2:	98 a7       	std	Y+40, r25	; 0x28
    1ec4:	a9 a7       	std	Y+41, r26	; 0x29
    1ec6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ecc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ece:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	53 e4       	ldi	r21, 0x43	; 67
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8b a3       	std	Y+35, r24	; 0x23
    1ee2:	9c a3       	std	Y+36, r25	; 0x24
    1ee4:	ad a3       	std	Y+37, r26	; 0x25
    1ee6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eea:	7c a1       	ldd	r23, Y+36	; 0x24
    1eec:	8d a1       	ldd	r24, Y+37	; 0x25
    1eee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_sendCommand+0x584>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9a a3       	std	Y+34, r25	; 0x22
    1f06:	89 a3       	std	Y+33, r24	; 0x21
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_sendCommand+0x602>
	else if (__tmp > 65535)
    1f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f10:	9e a1       	ldd	r25, Y+38	; 0x26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_sendCommand+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6f a1       	ldd	r22, Y+39	; 0x27
    1f24:	78 a5       	ldd	r23, Y+40	; 0x28
    1f26:	89 a5       	ldd	r24, Y+41	; 0x29
    1f28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a a3       	std	Y+34, r25	; 0x22
    1f48:	89 a3       	std	Y+33, r24	; 0x21
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_sendCommand+0x5e4>
    1f4c:	89 e1       	ldi	r24, 0x19	; 25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	98 a3       	std	Y+32, r25	; 0x20
    1f52:	8f 8f       	std	Y+31, r24	; 0x1f
    1f54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f56:	98 a1       	ldd	r25, Y+32	; 0x20
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendCommand+0x5d2>
    1f5c:	98 a3       	std	Y+32, r25	; 0x20
    1f5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	89 a1       	ldd	r24, Y+33	; 0x21
    1f62:	9a a1       	ldd	r25, Y+34	; 0x22
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_sendCommand+0x5c6>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <LCD_sendCommand+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9a a3       	std	Y+34, r25	; 0x22
    1f86:	89 a3       	std	Y+33, r24	; 0x21
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0x60e>
    1f98:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (command << 4) & 0xF0;
    1f9c:	a5 e3       	ldi	r26, 0x35	; 53
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 59       	subi	r30, 0x9D	; 157
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	82 95       	swap	r24
    1fae:	92 95       	swap	r25
    1fb0:	90 7f       	andi	r25, 0xF0	; 240
    1fb2:	98 27       	eor	r25, r24
    1fb4:	80 7f       	andi	r24, 0xF0	; 240
    1fb6:	98 27       	eor	r25, r24
    1fb8:	8c 93       	st	X, r24
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e8       	ldi	r26, 0x80	; 128
    1fc0:	bf e3       	ldi	r27, 0x3F	; 63
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
    1fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a e7       	ldi	r20, 0x7A	; 122
    1fd8:	53 e4       	ldi	r21, 0x43	; 67
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8d 8b       	std	Y+21, r24	; 0x15
    1fe4:	9e 8b       	std	Y+22, r25	; 0x16
    1fe6:	af 8b       	std	Y+23, r26	; 0x17
    1fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <LCD_sendCommand+0x686>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	3f c0       	rjmp	.+126    	; 0x208a <LCD_sendCommand+0x704>
	else if (__tmp > 65535)
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <LCD_sendCommand+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	0f c0       	rjmp	.+30     	; 0x206c <LCD_sendCommand+0x6e6>
    204e:	89 e1       	ldi	r24, 0x19	; 25
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	9a 89       	ldd	r25, Y+18	; 0x12
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_sendCommand+0x6d4>
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <LCD_sendCommand+0x6c8>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <LCD_sendCommand+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	98 89       	ldd	r25, Y+16	; 0x10
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_sendCommand+0x710>
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (command & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    209e:	a2 e3       	ldi	r26, 0x32	; 50
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e2 e3       	ldi	r30, 0x32	; 50
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 7b       	andi	r24, 0xBF	; 191
    20aa:	8c 93       	st	X, r24
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	53 e4       	ldi	r21, 0x43	; 67
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_sendCommand+0x778>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_sendCommand+0x7f6>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_sendCommand+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_sendCommand+0x7d8>
    2140:	89 e1       	ldi	r24, 0x19	; 25
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_sendCommand+0x7c6>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_sendCommand+0x7ba>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_sendCommand+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0x802>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    2190:	cd 59       	subi	r28, 0x9D	; 157
    2192:	df 4f       	sbci	r29, 0xFF	; 255
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	c3 56       	subi	r28, 0x63	; 99
    21b6:	d0 40       	sbci	r29, 0x00	; 0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	fe 01       	movw	r30, r28
    21c4:	ed 59       	subi	r30, 0x9D	; 157
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    21ca:	a2 e3       	ldi	r26, 0x32	; 50
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e2 e3       	ldi	r30, 0x32	; 50
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 61       	ori	r24, 0x10	; 16
    21d6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    21d8:	a2 e3       	ldi	r26, 0x32	; 50
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e2 e3       	ldi	r30, 0x32	; 50
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8f 7d       	andi	r24, 0xDF	; 223
    21e4:	8c 93       	st	X, r24
    21e6:	fe 01       	movw	r30, r28
    21e8:	e1 5a       	subi	r30, 0xA1	; 161
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e8       	ldi	r26, 0x80	; 128
    21f2:	bf e3       	ldi	r27, 0x3F	; 63
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	a2 83       	std	Z+2, r26	; 0x02
    21fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	8e 01       	movw	r16, r28
    21fe:	05 5a       	subi	r16, 0xA5	; 165
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	e1 5a       	subi	r30, 0xA1	; 161
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a e7       	ldi	r20, 0x7A	; 122
    2216:	53 e4       	ldi	r21, 0x43	; 67
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	fe 01       	movw	r30, r28
    222c:	e5 5a       	subi	r30, 0xA5	; 165
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	44 f4       	brge	.+16     	; 0x2258 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2248:	fe 01       	movw	r30, r28
    224a:	e7 5a       	subi	r30, 0xA7	; 167
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	64 c0       	rjmp	.+200    	; 0x2320 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2258:	fe 01       	movw	r30, r28
    225a:	e5 5a       	subi	r30, 0xA5	; 165
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <LCD_displayCharacter+0xd0>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	fe 01       	movw	r30, r28
    227a:	e1 5a       	subi	r30, 0xA1	; 161
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8e 01       	movw	r16, r28
    2298:	07 5a       	subi	r16, 0xA7	; 167
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <LCD_displayCharacter+0x146>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e9 5a       	subi	r30, 0xA9	; 169
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	89 e1       	ldi	r24, 0x19	; 25
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	fe 01       	movw	r30, r28
    22c0:	e9 5a       	subi	r30, 0xA9	; 169
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_displayCharacter+0x120>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e9 5a       	subi	r30, 0xA9	; 169
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	de 01       	movw	r26, r28
    22d8:	a7 5a       	subi	r26, 0xA7	; 167
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	e7 5a       	subi	r30, 0xA7	; 167
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	fe 01       	movw	r30, r28
    22f0:	e7 5a       	subi	r30, 0xA7	; 167
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	d1 f6       	brne	.-76     	; 0x22b0 <LCD_displayCharacter+0x108>
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	8e 01       	movw	r16, r28
    2300:	07 5a       	subi	r16, 0xA7	; 167
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	e5 5a       	subi	r30, 0xA5	; 165
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	de 01       	movw	r26, r28
    2322:	ab 5a       	subi	r26, 0xAB	; 171
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e7 5a       	subi	r30, 0xA7	; 167
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	fe 01       	movw	r30, r28
    2336:	eb 5a       	subi	r30, 0xAB	; 171
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <LCD_displayCharacter+0x196>
    2342:	fe 01       	movw	r30, r28
    2344:	eb 5a       	subi	r30, 0xAB	; 171
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    234c:	a2 e3       	ldi	r26, 0x32	; 50
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e2 e3       	ldi	r30, 0x32	; 50
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 64       	ori	r24, 0x40	; 64
    2358:	8c 93       	st	X, r24
    235a:	fe 01       	movw	r30, r28
    235c:	ef 5a       	subi	r30, 0xAF	; 175
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e8       	ldi	r26, 0x80	; 128
    2366:	bf e3       	ldi	r27, 0x3F	; 63
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	8e 01       	movw	r16, r28
    2372:	03 5b       	subi	r16, 0xB3	; 179
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	fe 01       	movw	r30, r28
    2378:	ef 5a       	subi	r30, 0xAF	; 175
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a e7       	ldi	r20, 0x7A	; 122
    238a:	53 e4       	ldi	r21, 0x43	; 67
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	f8 01       	movw	r30, r16
    2396:	80 83       	st	Z, r24
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	a2 83       	std	Z+2, r26	; 0x02
    239c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    239e:	fe 01       	movw	r30, r28
    23a0:	e3 5b       	subi	r30, 0xB3	; 179
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	44 f4       	brge	.+16     	; 0x23cc <LCD_displayCharacter+0x224>
		__ticks = 1;
    23bc:	fe 01       	movw	r30, r28
    23be:	e5 5b       	subi	r30, 0xB5	; 181
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    23ca:	64 c0       	rjmp	.+200    	; 0x2494 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    23cc:	fe 01       	movw	r30, r28
    23ce:	e3 5b       	subi	r30, 0xB3	; 179
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	0c f0       	brlt	.+2      	; 0x23ec <LCD_displayCharacter+0x244>
    23ea:	43 c0       	rjmp	.+134    	; 0x2472 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	fe 01       	movw	r30, r28
    23ee:	ef 5a       	subi	r30, 0xAF	; 175
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8e 01       	movw	r16, r28
    240c:	05 5b       	subi	r16, 0xB5	; 181
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	f8 01       	movw	r30, r16
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	80 83       	st	Z, r24
    2422:	1f c0       	rjmp	.+62     	; 0x2462 <LCD_displayCharacter+0x2ba>
    2424:	fe 01       	movw	r30, r28
    2426:	e7 5b       	subi	r30, 0xB7	; 183
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	89 e1       	ldi	r24, 0x19	; 25
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	fe 01       	movw	r30, r28
    2434:	e7 5b       	subi	r30, 0xB7	; 183
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_displayCharacter+0x294>
    2440:	fe 01       	movw	r30, r28
    2442:	e7 5b       	subi	r30, 0xB7	; 183
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	de 01       	movw	r26, r28
    244c:	a5 5b       	subi	r26, 0xB5	; 181
    244e:	bf 4f       	sbci	r27, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e5 5b       	subi	r30, 0xB5	; 181
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	11 96       	adiw	r26, 0x01	; 1
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	fe 01       	movw	r30, r28
    2464:	e5 5b       	subi	r30, 0xB5	; 181
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	d1 f6       	brne	.-76     	; 0x2424 <LCD_displayCharacter+0x27c>
    2470:	27 c0       	rjmp	.+78     	; 0x24c0 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	8e 01       	movw	r16, r28
    2474:	05 5b       	subi	r16, 0xB5	; 181
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	e3 5b       	subi	r30, 0xB3	; 179
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	de 01       	movw	r26, r28
    2496:	a9 5b       	subi	r26, 0xB9	; 185
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	e5 5b       	subi	r30, 0xB5	; 181
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	8d 93       	st	X+, r24
    24a6:	9c 93       	st	X, r25
    24a8:	fe 01       	movw	r30, r28
    24aa:	e9 5b       	subi	r30, 0xB9	; 185
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 81       	ld	r24, Z
    24b0:	91 81       	ldd	r25, Z+1	; 0x01
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_displayCharacter+0x30a>
    24b6:	fe 01       	movw	r30, r28
    24b8:	e9 5b       	subi	r30, 0xB9	; 185
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data & 0xF0);
    24c0:	a5 e3       	ldi	r26, 0x35	; 53
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	fe 01       	movw	r30, r28
    24c6:	ed 59       	subi	r30, 0x9D	; 157
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	80 7f       	andi	r24, 0xF0	; 240
    24ce:	8c 93       	st	X, r24
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 5b       	subi	r30, 0xBD	; 189
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e8       	ldi	r26, 0x80	; 128
    24dc:	bf e3       	ldi	r27, 0x3F	; 63
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	8e 01       	movw	r16, r28
    24e8:	01 5c       	subi	r16, 0xC1	; 193
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	ed 5b       	subi	r30, 0xBD	; 189
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a e7       	ldi	r20, 0x7A	; 122
    2500:	53 e4       	ldi	r21, 0x43	; 67
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	f8 01       	movw	r30, r16
    250c:	80 83       	st	Z, r24
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	a2 83       	std	Z+2, r26	; 0x02
    2512:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2514:	fe 01       	movw	r30, r28
    2516:	ff 96       	adiw	r30, 0x3f	; 63
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <LCD_displayCharacter+0x392>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9e af       	std	Y+62, r25	; 0x3e
    2536:	8d af       	std	Y+61, r24	; 0x3d
    2538:	46 c0       	rjmp	.+140    	; 0x25c6 <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    253a:	fe 01       	movw	r30, r28
    253c:	ff 96       	adiw	r30, 0x3f	; 63
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	64 f5       	brge	.+88     	; 0x25ae <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	fe 01       	movw	r30, r28
    2558:	ed 5b       	subi	r30, 0xBD	; 189
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e af       	std	Y+62, r25	; 0x3e
    2582:	8d af       	std	Y+61, r24	; 0x3d
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <LCD_displayCharacter+0x3fc>
    2586:	89 e1       	ldi	r24, 0x19	; 25
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c af       	std	Y+60, r25	; 0x3c
    258c:	8b af       	std	Y+59, r24	; 0x3b
    258e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2590:	9c ad       	ldd	r25, Y+60	; 0x3c
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_displayCharacter+0x3ea>
    2596:	9c af       	std	Y+60, r25	; 0x3c
    2598:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d ad       	ldd	r24, Y+61	; 0x3d
    259c:	9e ad       	ldd	r25, Y+62	; 0x3e
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e af       	std	Y+62, r25	; 0x3e
    25a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <LCD_displayCharacter+0x3de>
    25ac:	16 c0       	rjmp	.+44     	; 0x25da <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	fe 01       	movw	r30, r28
    25b0:	ff 96       	adiw	r30, 0x3f	; 63
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e af       	std	Y+62, r25	; 0x3e
    25c4:	8d af       	std	Y+61, r24	; 0x3d
    25c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ca:	9a af       	std	Y+58, r25	; 0x3a
    25cc:	89 af       	std	Y+57, r24	; 0x39
    25ce:	89 ad       	ldd	r24, Y+57	; 0x39
    25d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayCharacter+0x42a>
    25d6:	9a af       	std	Y+58, r25	; 0x3a
    25d8:	89 af       	std	Y+57, r24	; 0x39
		#else 
			LCD_DATA_PORT = ((data >> 4) & 0x0F);
		#endif

		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    25da:	a2 e3       	ldi	r26, 0x32	; 50
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e2 e3       	ldi	r30, 0x32	; 50
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	8f 7b       	andi	r24, 0xBF	; 191
    25e6:	8c 93       	st	X, r24
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e8       	ldi	r26, 0x80	; 128
    25ee:	bf e3       	ldi	r27, 0x3F	; 63
    25f0:	8d ab       	std	Y+53, r24	; 0x35
    25f2:	9e ab       	std	Y+54, r25	; 0x36
    25f4:	af ab       	std	Y+55, r26	; 0x37
    25f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	6d a9       	ldd	r22, Y+53	; 0x35
    25fa:	7e a9       	ldd	r23, Y+54	; 0x36
    25fc:	8f a9       	ldd	r24, Y+55	; 0x37
    25fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	89 ab       	std	Y+49, r24	; 0x31
    2612:	9a ab       	std	Y+50, r25	; 0x32
    2614:	ab ab       	std	Y+51, r26	; 0x33
    2616:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2618:	69 a9       	ldd	r22, Y+49	; 0x31
    261a:	7a a9       	ldd	r23, Y+50	; 0x32
    261c:	8b a9       	ldd	r24, Y+51	; 0x33
    261e:	9c a9       	ldd	r25, Y+52	; 0x34
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <LCD_displayCharacter+0x492>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	98 ab       	std	Y+48, r25	; 0x30
    2636:	8f a7       	std	Y+47, r24	; 0x2f
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <LCD_displayCharacter+0x510>
	else if (__tmp > 65535)
    263a:	69 a9       	ldd	r22, Y+49	; 0x31
    263c:	7a a9       	ldd	r23, Y+50	; 0x32
    263e:	8b a9       	ldd	r24, Y+51	; 0x33
    2640:	9c a9       	ldd	r25, Y+52	; 0x34
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <LCD_displayCharacter+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	6d a9       	ldd	r22, Y+53	; 0x35
    2654:	7e a9       	ldd	r23, Y+54	; 0x36
    2656:	8f a9       	ldd	r24, Y+55	; 0x37
    2658:	98 ad       	ldd	r25, Y+56	; 0x38
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	98 ab       	std	Y+48, r25	; 0x30
    2678:	8f a7       	std	Y+47, r24	; 0x2f
    267a:	0f c0       	rjmp	.+30     	; 0x269a <LCD_displayCharacter+0x4f2>
    267c:	89 e1       	ldi	r24, 0x19	; 25
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e a7       	std	Y+46, r25	; 0x2e
    2682:	8d a7       	std	Y+45, r24	; 0x2d
    2684:	8d a5       	ldd	r24, Y+45	; 0x2d
    2686:	9e a5       	ldd	r25, Y+46	; 0x2e
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_displayCharacter+0x4e0>
    268c:	9e a7       	std	Y+46, r25	; 0x2e
    268e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8f a5       	ldd	r24, Y+47	; 0x2f
    2692:	98 a9       	ldd	r25, Y+48	; 0x30
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	98 ab       	std	Y+48, r25	; 0x30
    2698:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8f a5       	ldd	r24, Y+47	; 0x2f
    269c:	98 a9       	ldd	r25, Y+48	; 0x30
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <LCD_displayCharacter+0x4d4>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <LCD_displayCharacter+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	69 a9       	ldd	r22, Y+49	; 0x31
    26a6:	7a a9       	ldd	r23, Y+50	; 0x32
    26a8:	8b a9       	ldd	r24, Y+51	; 0x33
    26aa:	9c a9       	ldd	r25, Y+52	; 0x34
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	98 ab       	std	Y+48, r25	; 0x30
    26b6:	8f a7       	std	Y+47, r24	; 0x2f
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	9c a7       	std	Y+44, r25	; 0x2c
    26be:	8b a7       	std	Y+43, r24	; 0x2b
    26c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayCharacter+0x51c>
    26c8:	9c a7       	std	Y+44, r25	; 0x2c
    26ca:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    26cc:	a2 e3       	ldi	r26, 0x32	; 50
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e2 e3       	ldi	r30, 0x32	; 50
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 64       	ori	r24, 0x40	; 64
    26d8:	8c 93       	st	X, r24
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	a0 e8       	ldi	r26, 0x80	; 128
    26e0:	bf e3       	ldi	r27, 0x3F	; 63
    26e2:	8f a3       	std	Y+39, r24	; 0x27
    26e4:	98 a7       	std	Y+40, r25	; 0x28
    26e6:	a9 a7       	std	Y+41, r26	; 0x29
    26e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ea:	6f a1       	ldd	r22, Y+39	; 0x27
    26ec:	78 a5       	ldd	r23, Y+40	; 0x28
    26ee:	89 a5       	ldd	r24, Y+41	; 0x29
    26f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	4a e7       	ldi	r20, 0x7A	; 122
    26f8:	53 e4       	ldi	r21, 0x43	; 67
    26fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8b a3       	std	Y+35, r24	; 0x23
    2704:	9c a3       	std	Y+36, r25	; 0x24
    2706:	ad a3       	std	Y+37, r26	; 0x25
    2708:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    270a:	6b a1       	ldd	r22, Y+35	; 0x23
    270c:	7c a1       	ldd	r23, Y+36	; 0x24
    270e:	8d a1       	ldd	r24, Y+37	; 0x25
    2710:	9e a1       	ldd	r25, Y+38	; 0x26
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e8       	ldi	r20, 0x80	; 128
    2718:	5f e3       	ldi	r21, 0x3F	; 63
    271a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    271e:	88 23       	and	r24, r24
    2720:	2c f4       	brge	.+10     	; 0x272c <LCD_displayCharacter+0x584>
		__ticks = 1;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9a a3       	std	Y+34, r25	; 0x22
    2728:	89 a3       	std	Y+33, r24	; 0x21
    272a:	3f c0       	rjmp	.+126    	; 0x27aa <LCD_displayCharacter+0x602>
	else if (__tmp > 65535)
    272c:	6b a1       	ldd	r22, Y+35	; 0x23
    272e:	7c a1       	ldd	r23, Y+36	; 0x24
    2730:	8d a1       	ldd	r24, Y+37	; 0x25
    2732:	9e a1       	ldd	r25, Y+38	; 0x26
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	3f ef       	ldi	r19, 0xFF	; 255
    2738:	4f e7       	ldi	r20, 0x7F	; 127
    273a:	57 e4       	ldi	r21, 0x47	; 71
    273c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2740:	18 16       	cp	r1, r24
    2742:	4c f5       	brge	.+82     	; 0x2796 <LCD_displayCharacter+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	6f a1       	ldd	r22, Y+39	; 0x27
    2746:	78 a5       	ldd	r23, Y+40	; 0x28
    2748:	89 a5       	ldd	r24, Y+41	; 0x29
    274a:	9a a5       	ldd	r25, Y+42	; 0x2a
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e2       	ldi	r20, 0x20	; 32
    2752:	51 e4       	ldi	r21, 0x41	; 65
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9a a3       	std	Y+34, r25	; 0x22
    276a:	89 a3       	std	Y+33, r24	; 0x21
    276c:	0f c0       	rjmp	.+30     	; 0x278c <LCD_displayCharacter+0x5e4>
    276e:	89 e1       	ldi	r24, 0x19	; 25
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	98 a3       	std	Y+32, r25	; 0x20
    2774:	8f 8f       	std	Y+31, r24	; 0x1f
    2776:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2778:	98 a1       	ldd	r25, Y+32	; 0x20
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_displayCharacter+0x5d2>
    277e:	98 a3       	std	Y+32, r25	; 0x20
    2780:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	9a a3       	std	Y+34, r25	; 0x22
    278a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278c:	89 a1       	ldd	r24, Y+33	; 0x21
    278e:	9a a1       	ldd	r25, Y+34	; 0x22
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	69 f7       	brne	.-38     	; 0x276e <LCD_displayCharacter+0x5c6>
    2794:	14 c0       	rjmp	.+40     	; 0x27be <LCD_displayCharacter+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2796:	6b a1       	ldd	r22, Y+35	; 0x23
    2798:	7c a1       	ldd	r23, Y+36	; 0x24
    279a:	8d a1       	ldd	r24, Y+37	; 0x25
    279c:	9e a1       	ldd	r25, Y+38	; 0x26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9a a3       	std	Y+34, r25	; 0x22
    27a8:	89 a3       	std	Y+33, r24	; 0x21
    27aa:	89 a1       	ldd	r24, Y+33	; 0x21
    27ac:	9a a1       	ldd	r25, Y+34	; 0x22
    27ae:	9e 8f       	std	Y+30, r25	; 0x1e
    27b0:	8d 8f       	std	Y+29, r24	; 0x1d
    27b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_displayCharacter+0x60e>
    27ba:	9e 8f       	std	Y+30, r25	; 0x1e
    27bc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (data << 4) & 0xF0;
    27be:	a5 e3       	ldi	r26, 0x35	; 53
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 59       	subi	r30, 0x9D	; 157
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	88 2f       	mov	r24, r24
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	82 95       	swap	r24
    27d0:	92 95       	swap	r25
    27d2:	90 7f       	andi	r25, 0xF0	; 240
    27d4:	98 27       	eor	r25, r24
    27d6:	80 7f       	andi	r24, 0xF0	; 240
    27d8:	98 27       	eor	r25, r24
    27da:	8c 93       	st	X, r24
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 e8       	ldi	r26, 0x80	; 128
    27e2:	bf e3       	ldi	r27, 0x3F	; 63
    27e4:	89 8f       	std	Y+25, r24	; 0x19
    27e6:	9a 8f       	std	Y+26, r25	; 0x1a
    27e8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	69 8d       	ldd	r22, Y+25	; 0x19
    27ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a e7       	ldi	r20, 0x7A	; 122
    27fa:	53 e4       	ldi	r21, 0x43	; 67
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8d 8b       	std	Y+21, r24	; 0x15
    2806:	9e 8b       	std	Y+22, r25	; 0x16
    2808:	af 8b       	std	Y+23, r26	; 0x17
    280a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    280c:	6d 89       	ldd	r22, Y+21	; 0x15
    280e:	7e 89       	ldd	r23, Y+22	; 0x16
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	98 8d       	ldd	r25, Y+24	; 0x18
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	2c f4       	brge	.+10     	; 0x282e <LCD_displayCharacter+0x686>
		__ticks = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	3f c0       	rjmp	.+126    	; 0x28ac <LCD_displayCharacter+0x704>
	else if (__tmp > 65535)
    282e:	6d 89       	ldd	r22, Y+21	; 0x15
    2830:	7e 89       	ldd	r23, Y+22	; 0x16
    2832:	8f 89       	ldd	r24, Y+23	; 0x17
    2834:	98 8d       	ldd	r25, Y+24	; 0x18
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	3f ef       	ldi	r19, 0xFF	; 255
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	57 e4       	ldi	r21, 0x47	; 71
    283e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	4c f5       	brge	.+82     	; 0x2898 <LCD_displayCharacter+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	69 8d       	ldd	r22, Y+25	; 0x19
    2848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
    286e:	0f c0       	rjmp	.+30     	; 0x288e <LCD_displayCharacter+0x6e6>
    2870:	89 e1       	ldi	r24, 0x19	; 25
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9a 8b       	std	Y+18, r25	; 0x12
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	89 89       	ldd	r24, Y+17	; 0x11
    287a:	9a 89       	ldd	r25, Y+18	; 0x12
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_displayCharacter+0x6d4>
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9c 8b       	std	Y+20, r25	; 0x14
    288c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	69 f7       	brne	.-38     	; 0x2870 <LCD_displayCharacter+0x6c8>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <LCD_displayCharacter+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9c 8b       	std	Y+20, r25	; 0x14
    28aa:	8b 8b       	std	Y+19, r24	; 0x13
    28ac:	8b 89       	ldd	r24, Y+19	; 0x13
    28ae:	9c 89       	ldd	r25, Y+20	; 0x14
    28b0:	98 8b       	std	Y+16, r25	; 0x10
    28b2:	8f 87       	std	Y+15, r24	; 0x0f
    28b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b6:	98 89       	ldd	r25, Y+16	; 0x10
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_displayCharacter+0x710>
    28bc:	98 8b       	std	Y+16, r25	; 0x10
    28be:	8f 87       	std	Y+15, r24	; 0x0f
		#else 
			LCD_DATA_PORT = (data & 0x0F);
		#endif
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    28c0:	a2 e3       	ldi	r26, 0x32	; 50
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e2 e3       	ldi	r30, 0x32	; 50
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	8f 7b       	andi	r24, 0xBF	; 191
    28cc:	8c 93       	st	X, r24
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e8       	ldi	r26, 0x80	; 128
    28d4:	bf e3       	ldi	r27, 0x3F	; 63
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
    28d8:	9c 87       	std	Y+12, r25	; 0x0c
    28da:	ad 87       	std	Y+13, r26	; 0x0d
    28dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a e7       	ldi	r20, 0x7A	; 122
    28ec:	53 e4       	ldi	r21, 0x43	; 67
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	98 87       	std	Y+8, r25	; 0x08
    28fa:	a9 87       	std	Y+9, r26	; 0x09
    28fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <LCD_displayCharacter+0x778>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	3f c0       	rjmp	.+126    	; 0x299e <LCD_displayCharacter+0x7f6>
	else if (__tmp > 65535)
    2920:	6f 81       	ldd	r22, Y+7	; 0x07
    2922:	78 85       	ldd	r23, Y+8	; 0x08
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	9a 85       	ldd	r25, Y+10	; 0x0a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <LCD_displayCharacter+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <LCD_displayCharacter+0x7d8>
    2962:	89 e1       	ldi	r24, 0x19	; 25
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_displayCharacter+0x7c6>
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <LCD_displayCharacter+0x7ba>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <LCD_displayCharacter+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x802>
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    29b2:	cd 59       	subi	r28, 0x9D	; 157
    29b4:	df 4f       	sbci	r29, 0xFF	; 255
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <LCD_displayString+0x6>
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9b 83       	std	Y+3, r25	; 0x03
    29d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29da:	19 82       	std	Y+1, r1	; 0x01
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	9b 81       	ldd	r25, Y+3	; 0x03
    29e8:	fc 01       	movw	r30, r24
    29ea:	e2 0f       	add	r30, r18
    29ec:	f3 1f       	adc	r31, r19
    29ee:	80 81       	ld	r24, Z
    29f0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_displayCharacter>
		i++;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	8f 5f       	subi	r24, 0xFF	; 255
    29f8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	88 23       	and	r24, r24
    2a0e:	39 f7       	brne	.-50     	; 0x29de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <LCD_goToRowColumn+0x6>
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LCD_goToRowColumn+0x8>
    2a24:	0f 92       	push	r0
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	3d 83       	std	Y+5, r19	; 0x05
    2a36:	2c 83       	std	Y+4, r18	; 0x04
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	c1 f0       	breq	.+48     	; 0x2a72 <LCD_goToRowColumn+0x56>
    2a42:	2c 81       	ldd	r18, Y+4	; 0x04
    2a44:	3d 81       	ldd	r19, Y+5	; 0x05
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_goToRowColumn+0x3a>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <LCD_goToRowColumn+0x50>
    2a54:	19 c0       	rjmp	.+50     	; 0x2a88 <LCD_goToRowColumn+0x6c>
    2a56:	2c 81       	ldd	r18, Y+4	; 0x04
    2a58:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5a:	22 30       	cpi	r18, 0x02	; 2
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <LCD_goToRowColumn+0x5e>
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	9d 81       	ldd	r25, Y+5	; 0x05
    2a64:	83 30       	cpi	r24, 0x03	; 3
    2a66:	91 05       	cpc	r25, r1
    2a68:	61 f0       	breq	.+24     	; 0x2a82 <LCD_goToRowColumn+0x66>
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	0b c0       	rjmp	.+22     	; 0x2a88 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	80 5c       	subi	r24, 0xC0	; 192
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	80 5f       	subi	r24, 0xF0	; 240
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	80 5b       	subi	r24, 0xB0	; 176
    2a86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	80 68       	ori	r24, 0x80	; 128
    2a8c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LCD_displayStringRowColumn+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <LCD_displayStringRowColumn+0x8>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	6a 83       	std	Y+2, r22	; 0x02
    2ab0:	5c 83       	std	Y+4, r21	; 0x04
    2ab2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	62 97       	sbiw	r28, 0x12	; 18
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	9e 01       	movw	r18, r28
    2af0:	2f 5f       	subi	r18, 0xFF	; 255
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	b9 01       	movw	r22, r18
    2af6:	4a e0       	ldi	r20, 0x0A	; 10
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	0e 94 24 18 	call	0x3048	; 0x3048 <itoa>
   LCD_displayString(buff);
    2afe:	ce 01       	movw	r24, r28
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2b06:	62 96       	adiw	r28, 0x12	; 18
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <main>:
 *
 *  Created on: Oct 21, 2017
 *      Author: Abdullah
 */
#include "HMI_MC.h"
int main (){
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	0f 92       	push	r0
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
	/* initiallize modules */
	LCD_init();
    2b36:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_init>
	Timer_init();
    2b3a:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <Timer_init>
	UART_init();
    2b3e:	0e 94 41 17 	call	0x2e82	; 0x2e82 <UART_init>
	state current_state =ENTER_PASSWORD;
    2b42:	19 82       	std	Y+1, r1	; 0x01
	GetUserPassword();
    2b44:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GetUserPassword>
while (1){

	if (current_state == ENTER_PASSWORD){
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	88 23       	and	r24, r24
    2b4c:	49 f4       	brne	.+18     	; 0x2b60 <main+0x34>
			if( EnterPassword() ){
    2b4e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <EnterPassword>
    2b52:	88 23       	and	r24, r24
    2b54:	19 f0       	breq	.+6      	; 0x2b5c <main+0x30>
				current_state = MAIN_MENU;}
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	89 83       	std	Y+1, r24	; 0x01
    2b5a:	f6 cf       	rjmp	.-20     	; 0x2b48 <main+0x1c>
			else {
				current_state =ENTER_PASSWORD;  }
    2b5c:	19 82       	std	Y+1, r1	; 0x01
    2b5e:	f4 cf       	rjmp	.-24     	; 0x2b48 <main+0x1c>

		}
	else if (current_state == MAIN_MENU){
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	51 f4       	brne	.+20     	; 0x2b7a <main+0x4e>
		if(MainMenu() == CHANGE_PASSWORD){
    2b66:	0e 94 82 08 	call	0x1104	; 0x1104 <MainMenu>
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	19 f4       	brne	.+6      	; 0x2b74 <main+0x48>
			current_state =PASSWORD_CHANGE;
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	ea cf       	rjmp	.-44     	; 0x2b48 <main+0x1c>
		}
		else {
			current_state =UNLOCKING_DOOR;
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	e7 cf       	rjmp	.-50     	; 0x2b48 <main+0x1c>
		}
	}
	else if (current_state == UNLOCKING_DOOR){
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	83 30       	cpi	r24, 0x03	; 3
    2b7e:	29 f4       	brne	.+10     	; 0x2b8a <main+0x5e>
		UnlockDoor();
    2b80:	0e 94 aa 08 	call	0x1154	; 0x1154 <UnlockDoor>
		current_state = MAIN_MENU;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	df cf       	rjmp	.-66     	; 0x2b48 <main+0x1c>
	}
	else if (current_state == PASSWORD_CHANGE){
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	e1 f6       	brne	.-72     	; 0x2b48 <main+0x1c>
		ChangePassword();
    2b90:	0e 94 ac 09 	call	0x1358	; 0x1358 <ChangePassword>
		GetUserPassword();
    2b94:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <GetUserPassword>
		current_state =MAIN_MENU;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	d5 cf       	rjmp	.-86     	; 0x2b48 <main+0x1c>

00002b9e <ComparePassword>:
 *  Created on: Oct 21, 2017
 *      Author: Abdullah
 */
#include "string.h"
 uint8 ComparePassword(uint8* str1,uint8* str2)
 {	uint8 i =0;
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <ComparePassword+0x6>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <ComparePassword+0x8>
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <ComparePassword+0xa>
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
    2bb0:	7d 83       	std	Y+5, r23	; 0x05
    2bb2:	6c 83       	std	Y+4, r22	; 0x04
    2bb4:	19 82       	std	Y+1, r1	; 0x01
    2bb6:	19 c0       	rjmp	.+50     	; 0x2bea <ComparePassword+0x4c>
	 while (str1[i]!='\0'){
		 if (str1[i] !=str2[i]){
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	40 81       	ld	r20, Z
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e2 0f       	add	r30, r18
    2bd8:	f3 1f       	adc	r31, r19
    2bda:	80 81       	ld	r24, Z
    2bdc:	48 17       	cp	r20, r24
    2bde:	11 f0       	breq	.+4      	; 0x2be4 <ComparePassword+0x46>
			 return 0;}
    2be0:	1e 82       	std	Y+6, r1	; 0x06
    2be2:	10 c0       	rjmp	.+32     	; 0x2c04 <ComparePassword+0x66>
	 i++ ;}
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	89 83       	std	Y+1, r24	; 0x01
 *      Author: Abdullah
 */
#include "string.h"
 uint8 ComparePassword(uint8* str1,uint8* str2)
 {	uint8 i =0;
	 while (str1[i]!='\0'){
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 23       	and	r24, r24
    2bfe:	e1 f6       	brne	.-72     	; 0x2bb8 <ComparePassword+0x1a>
		 if (str1[i] !=str2[i]){
			 return 0;}
	 i++ ;}
	 return 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	8e 83       	std	Y+6, r24	; 0x06
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
 }
    2c06:	26 96       	adiw	r28, 0x06	; 6
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <CopyString>:
 void  CopyString(uint8* str1,uint8* str2){
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <CopyString+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <CopyString+0x8>
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	7d 83       	std	Y+5, r23	; 0x05
    2c2c:	6c 83       	std	Y+4, r22	; 0x04
	 uint8 i =0;
    2c2e:	19 82       	std	Y+1, r1	; 0x01
    2c30:	15 c0       	rjmp	.+42     	; 0x2c5c <CopyString+0x44>
	 while(str1[i] != '\0'){
		 str1[i]=str2[i];
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	a2 0f       	add	r26, r18
    2c40:	b3 1f       	adc	r27, r19
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e2 0f       	add	r30, r18
    2c50:	f3 1f       	adc	r31, r19
    2c52:	80 81       	ld	r24, Z
    2c54:	8c 93       	st	X, r24
		 i++ ;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	 i++ ;}
	 return 1;
 }
 void  CopyString(uint8* str1,uint8* str2){
	 uint8 i =0;
	 while(str1[i] != '\0'){
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	fc 01       	movw	r30, r24
    2c68:	e2 0f       	add	r30, r18
    2c6a:	f3 1f       	adc	r31, r19
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 23       	and	r24, r24
    2c70:	01 f7       	brne	.-64     	; 0x2c32 <CopyString+0x1a>
		 str1[i]=str2[i];
		 i++ ;
	 }
	 str2[i]='\0';
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e2 0f       	add	r30, r18
    2c80:	f3 1f       	adc	r31, r19
    2c82:	10 82       	st	Z, r1
 }
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <UARTString>:
void UARTString (uint8* str){
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <UARTString+0x6>
    2c9a:	0f 92       	push	r0
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	9b 83       	std	Y+3, r25	; 0x03
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    2ca4:	19 82       	std	Y+1, r1	; 0x01
    2ca6:	03 c0       	rjmp	.+6      	; 0x2cae <UARTString+0x1a>
	while(str[i] !='\0'){
		i++;
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	89 83       	std	Y+1, r24	; 0x01
	 }
	 str2[i]='\0';
 }
void UARTString (uint8* str){
	uint8 i =0;
	while(str[i] !='\0'){
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e2 0f       	add	r30, r18
    2cbc:	f3 1f       	adc	r31, r19
    2cbe:	80 81       	ld	r24, Z
    2cc0:	88 23       	and	r24, r24
    2cc2:	91 f7       	brne	.-28     	; 0x2ca8 <UARTString+0x14>
		i++;
	}
	str[i]='#';
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e2 0f       	add	r30, r18
    2cd2:	f3 1f       	adc	r31, r19
    2cd4:	83 e2       	ldi	r24, 0x23	; 35
    2cd6:	80 83       	st	Z, r24

}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <__vector_8>:
#include "timer.h"
#define REQ_TICKS(SEC) ( (TCNT_MAX)-( (SEC)/(TICK_TIME) ) )/* macro to get the required ticks */

volatile uint8 g_TimePassed =0 ; /* global variable to check if time passed */
static uint8 g_TimerSecs = 0;
ISR(TIMER1_OVF_vect){
    2ce4:	1f 92       	push	r1
    2ce6:	0f 92       	push	r0
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	0f 92       	push	r0
    2cec:	11 24       	eor	r1, r1
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	2f 93       	push	r18
    2cf4:	3f 93       	push	r19
    2cf6:	4f 93       	push	r20
    2cf8:	5f 93       	push	r21
    2cfa:	6f 93       	push	r22
    2cfc:	7f 93       	push	r23
    2cfe:	8f 93       	push	r24
    2d00:	9f 93       	push	r25
    2d02:	af 93       	push	r26
    2d04:	bf 93       	push	r27
    2d06:	ef 93       	push	r30
    2d08:	ff 93       	push	r31
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
	g_TimePassed = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 93 26 02 	sts	0x0226, r24
	TCNT1=REQ_TICKS(g_TimerSecs);
    2d18:	0c e4       	ldi	r16, 0x4C	; 76
    2d1a:	10 e0       	ldi	r17, 0x00	; 0
    2d1c:	80 91 27 02 	lds	r24, 0x0227
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	aa 27       	eor	r26, r26
    2d26:	97 fd       	sbrc	r25, 7
    2d28:	a0 95       	com	r26
    2d2a:	ba 2f       	mov	r27, r26
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	2a e8       	ldi	r18, 0x8A	; 138
    2d3e:	3b e4       	ldi	r19, 0x4B	; 75
    2d40:	46 e8       	ldi	r20, 0x86	; 134
    2d42:	5a eb       	ldi	r21, 0xBA	; 186
    2d44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	f8 01       	movw	r30, r16
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	80 83       	st	Z, r24
}
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	bf 91       	pop	r27
    2d7c:	af 91       	pop	r26
    2d7e:	9f 91       	pop	r25
    2d80:	8f 91       	pop	r24
    2d82:	7f 91       	pop	r23
    2d84:	6f 91       	pop	r22
    2d86:	5f 91       	pop	r21
    2d88:	4f 91       	pop	r20
    2d8a:	3f 91       	pop	r19
    2d8c:	2f 91       	pop	r18
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <Timer_init>:

void Timer_init(){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62

	/*  Normal mode COM1B0=0 COM1B1=0  COM1A0 =0 COM1A1=0
	 *  Pescaler 1024 CS12=1 CS11=0 CS10=1
	 *  enable global interrupt
	 */
	TCCR1B |= (1<<CS12) | (1<<CS10);
    2da4:	ae e4       	ldi	r26, 0x4E	; 78
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	ee e4       	ldi	r30, 0x4E	; 78
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	85 60       	ori	r24, 0x05	; 5
    2db0:	8c 93       	st	X, r24
	SET_BIT(SREG,7);
    2db2:	af e5       	ldi	r26, 0x5F	; 95
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	ef e5       	ldi	r30, 0x5F	; 95
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 68       	ori	r24, 0x80	; 128
    2dbe:	8c 93       	st	X, r24
}
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <Timer_SetTime>:
void Timer_SetTime(uint8 sec){
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	89 83       	std	Y+1, r24	; 0x01
	/* set the required time and get value for TCNT1 register */
	g_TimerSecs = sec ;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	80 93 27 02 	sts	0x0227, r24
	TCNT1 = REQ_TICKS(g_TimerSecs);
    2ddc:	0c e4       	ldi	r16, 0x4C	; 76
    2dde:	10 e0       	ldi	r17, 0x00	; 0
    2de0:	80 91 27 02 	lds	r24, 0x0227
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	aa 27       	eor	r26, r26
    2dea:	97 fd       	sbrc	r25, 7
    2dec:	a0 95       	com	r26
    2dee:	ba 2f       	mov	r27, r26
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	2a e8       	ldi	r18, 0x8A	; 138
    2e02:	3b e4       	ldi	r19, 0x4B	; 75
    2e04:	46 e8       	ldi	r20, 0x86	; 134
    2e06:	5a eb       	ldi	r21, 0xBA	; 186
    2e08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
}
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <Timer_start>:
void Timer_start(void){
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
	/* set the TOIE1 bit to start the timer */
	SET_BIT(TIMSK,TOIE1);
    2e4a:	a9 e5       	ldi	r26, 0x59	; 89
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e9 e5       	ldi	r30, 0x59	; 89
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	84 60       	ori	r24, 0x04	; 4
    2e56:	8c 93       	st	X, r24
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <Timer_stop>:
void Timer_stop(void){
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
	/* clear the TOIE1 bit to stop the timer */
	CLEAR_BIT(TIMSK,TOIE1);
    2e66:	a9 e5       	ldi	r26, 0x59	; 89
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e9 e5       	ldi	r30, 0x59	; 89
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8b 7f       	andi	r24, 0xFB	; 251
    2e72:	8c 93       	st	X, r24
	TCNT1=0;
    2e74:	ec e4       	ldi	r30, 0x4C	; 76
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	11 82       	std	Z+1, r1	; 0x01
    2e7a:	10 82       	st	Z, r1
}
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <UART_init>:
#include "uart.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

void UART_init(void)
{
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e8a:	eb e2       	ldi	r30, 0x2B	; 43
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e92:	ea e2       	ldi	r30, 0x2A	; 42
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	88 e1       	ldi	r24, 0x18	; 24
    2e98:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2e9a:	e0 e4       	ldi	r30, 0x40	; 64
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	86 e8       	ldi	r24, 0x86	; 134
    2ea0:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2ea2:	e0 e4       	ldi	r30, 0x40	; 64
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2ea8:	e9 e2       	ldi	r30, 0x29	; 41
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	8c e0       	ldi	r24, 0x0C	; 12
    2eae:	80 83       	st	Z, r24
}
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	0f 92       	push	r0
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ec2:	eb e2       	ldi	r30, 0x2B	; 43
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	80 72       	andi	r24, 0x20	; 32
    2ece:	90 70       	andi	r25, 0x00	; 0
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	b9 f3       	breq	.-18     	; 0x2ec2 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2ed4:	ec e2       	ldi	r30, 0x2C	; 44
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2edc:	0f 90       	pop	r0
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2eec:	eb e2       	ldi	r30, 0x2B	; 43
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 23       	and	r24, r24
    2ef4:	dc f7       	brge	.-10     	; 0x2eec <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2ef6:	ec e2       	ldi	r30, 0x2C	; 44
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
}
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <UART_sendString+0x6>
    2f08:	0f 92       	push	r0
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	9b 83       	std	Y+3, r25	; 0x03
    2f10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f12:	19 82       	std	Y+1, r1	; 0x01
    2f14:	0e c0       	rjmp	.+28     	; 0x2f32 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	fc 01       	movw	r30, r24
    2f22:	e2 0f       	add	r30, r18
    2f24:	f3 1f       	adc	r31, r19
    2f26:	80 81       	ld	r24, Z
    2f28:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <UART_sendByte>
		i++;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	8f 5f       	subi	r24, 0xFF	; 255
    2f30:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 0f       	add	r30, r18
    2f40:	f3 1f       	adc	r31, r19
    2f42:	80 81       	ld	r24, Z
    2f44:	88 23       	and	r24, r24
    2f46:	39 f7       	brne	.-50     	; 0x2f16 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <UART_receiveString+0xa>
    2f5e:	0f 92       	push	r0
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	9b 83       	std	Y+3, r25	; 0x03
    2f66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f68:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	8c 01       	movw	r16, r24
    2f76:	02 0f       	add	r16, r18
    2f78:	13 1f       	adc	r17, r19
    2f7a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 83       	st	Z, r24
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	8c 01       	movw	r16, r24
    2f96:	02 0f       	add	r16, r18
    2f98:	13 1f       	adc	r17, r19
    2f9a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_recieveByte>
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	9b 81       	ldd	r25, Y+3	; 0x03
    2fac:	fc 01       	movw	r30, r24
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	80 81       	ld	r24, Z
    2fb4:	83 32       	cpi	r24, 0x23	; 35
    2fb6:	31 f7       	brne	.-52     	; 0x2f84 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	e2 0f       	add	r30, r18
    2fc6:	f3 1f       	adc	r31, r19
    2fc8:	10 82       	st	Z, r1
}
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	08 95       	ret

00002fda <__prologue_saves__>:
    2fda:	2f 92       	push	r2
    2fdc:	3f 92       	push	r3
    2fde:	4f 92       	push	r4
    2fe0:	5f 92       	push	r5
    2fe2:	6f 92       	push	r6
    2fe4:	7f 92       	push	r7
    2fe6:	8f 92       	push	r8
    2fe8:	9f 92       	push	r9
    2fea:	af 92       	push	r10
    2fec:	bf 92       	push	r11
    2fee:	cf 92       	push	r12
    2ff0:	df 92       	push	r13
    2ff2:	ef 92       	push	r14
    2ff4:	ff 92       	push	r15
    2ff6:	0f 93       	push	r16
    2ff8:	1f 93       	push	r17
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	ca 1b       	sub	r28, r26
    3004:	db 0b       	sbc	r29, r27
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	09 94       	ijmp

00003012 <__epilogue_restores__>:
    3012:	2a 88       	ldd	r2, Y+18	; 0x12
    3014:	39 88       	ldd	r3, Y+17	; 0x11
    3016:	48 88       	ldd	r4, Y+16	; 0x10
    3018:	5f 84       	ldd	r5, Y+15	; 0x0f
    301a:	6e 84       	ldd	r6, Y+14	; 0x0e
    301c:	7d 84       	ldd	r7, Y+13	; 0x0d
    301e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3020:	9b 84       	ldd	r9, Y+11	; 0x0b
    3022:	aa 84       	ldd	r10, Y+10	; 0x0a
    3024:	b9 84       	ldd	r11, Y+9	; 0x09
    3026:	c8 84       	ldd	r12, Y+8	; 0x08
    3028:	df 80       	ldd	r13, Y+7	; 0x07
    302a:	ee 80       	ldd	r14, Y+6	; 0x06
    302c:	fd 80       	ldd	r15, Y+5	; 0x05
    302e:	0c 81       	ldd	r16, Y+4	; 0x04
    3030:	1b 81       	ldd	r17, Y+3	; 0x03
    3032:	aa 81       	ldd	r26, Y+2	; 0x02
    3034:	b9 81       	ldd	r27, Y+1	; 0x01
    3036:	ce 0f       	add	r28, r30
    3038:	d1 1d       	adc	r29, r1
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	ed 01       	movw	r28, r26
    3046:	08 95       	ret

00003048 <itoa>:
    3048:	fb 01       	movw	r30, r22
    304a:	9f 01       	movw	r18, r30
    304c:	e8 94       	clt
    304e:	42 30       	cpi	r20, 0x02	; 2
    3050:	c4 f0       	brlt	.+48     	; 0x3082 <itoa+0x3a>
    3052:	45 32       	cpi	r20, 0x25	; 37
    3054:	b4 f4       	brge	.+44     	; 0x3082 <itoa+0x3a>
    3056:	4a 30       	cpi	r20, 0x0A	; 10
    3058:	29 f4       	brne	.+10     	; 0x3064 <itoa+0x1c>
    305a:	97 fb       	bst	r25, 7
    305c:	1e f4       	brtc	.+6      	; 0x3064 <itoa+0x1c>
    305e:	90 95       	com	r25
    3060:	81 95       	neg	r24
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	64 2f       	mov	r22, r20
    3066:	77 27       	eor	r23, r23
    3068:	0e 94 55 18 	call	0x30aa	; 0x30aa <__udivmodhi4>
    306c:	80 5d       	subi	r24, 0xD0	; 208
    306e:	8a 33       	cpi	r24, 0x3A	; 58
    3070:	0c f0       	brlt	.+2      	; 0x3074 <itoa+0x2c>
    3072:	89 5d       	subi	r24, 0xD9	; 217
    3074:	81 93       	st	Z+, r24
    3076:	cb 01       	movw	r24, r22
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	a1 f7       	brne	.-24     	; 0x3064 <itoa+0x1c>
    307c:	16 f4       	brtc	.+4      	; 0x3082 <itoa+0x3a>
    307e:	5d e2       	ldi	r21, 0x2D	; 45
    3080:	51 93       	st	Z+, r21
    3082:	10 82       	st	Z, r1
    3084:	c9 01       	movw	r24, r18
    3086:	0c 94 45 18 	jmp	0x308a	; 0x308a <strrev>

0000308a <strrev>:
    308a:	dc 01       	movw	r26, r24
    308c:	fc 01       	movw	r30, r24
    308e:	67 2f       	mov	r22, r23
    3090:	71 91       	ld	r23, Z+
    3092:	77 23       	and	r23, r23
    3094:	e1 f7       	brne	.-8      	; 0x308e <strrev+0x4>
    3096:	32 97       	sbiw	r30, 0x02	; 2
    3098:	04 c0       	rjmp	.+8      	; 0x30a2 <strrev+0x18>
    309a:	7c 91       	ld	r23, X
    309c:	6d 93       	st	X+, r22
    309e:	70 83       	st	Z, r23
    30a0:	62 91       	ld	r22, -Z
    30a2:	ae 17       	cp	r26, r30
    30a4:	bf 07       	cpc	r27, r31
    30a6:	c8 f3       	brcs	.-14     	; 0x309a <strrev+0x10>
    30a8:	08 95       	ret

000030aa <__udivmodhi4>:
    30aa:	aa 1b       	sub	r26, r26
    30ac:	bb 1b       	sub	r27, r27
    30ae:	51 e1       	ldi	r21, 0x11	; 17
    30b0:	07 c0       	rjmp	.+14     	; 0x30c0 <__udivmodhi4_ep>

000030b2 <__udivmodhi4_loop>:
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	a6 17       	cp	r26, r22
    30b8:	b7 07       	cpc	r27, r23
    30ba:	10 f0       	brcs	.+4      	; 0x30c0 <__udivmodhi4_ep>
    30bc:	a6 1b       	sub	r26, r22
    30be:	b7 0b       	sbc	r27, r23

000030c0 <__udivmodhi4_ep>:
    30c0:	88 1f       	adc	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	5a 95       	dec	r21
    30c6:	a9 f7       	brne	.-22     	; 0x30b2 <__udivmodhi4_loop>
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	08 95       	ret

000030d2 <_exit>:
    30d2:	f8 94       	cli

000030d4 <__stop_program>:
    30d4:	ff cf       	rjmp	.-2      	; 0x30d4 <__stop_program>
